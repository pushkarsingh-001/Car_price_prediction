{
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.12",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [
        {
          "sourceId": 10829111,
          "sourceType": "datasetVersion",
          "datasetId": 6724173
        }
      ],
      "dockerImageVersionId": 30918,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pushkarsingh-001/project-ai-ml/blob/main/Car_Price_Prediction.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **About Dataset**\n",
        "\n",
        "Car Price Prediction Dataset Description:\n",
        "This dataset contains 10,000 entries created for the purpose of predicting car prices. Each row represents information about a car and its price. The descriptions of the columns are as follows:\n",
        "\n",
        "## **Columns Descriptions:**\n",
        "\n",
        "* **Brand:** Specifies the brand of the car (e.g., Toyota, BMW, Ford).\n",
        "\n",
        "* **Model:** Specifies the model of the car (e.g., Corolla, Focus, X5).\n",
        "\n",
        "* **Year:** The production year of the car. Newer years typically indicate higher prices.\n",
        "\n",
        "* **Engine_Size:** Specifies the engine size in liters (L). Larger engines generally correlate with higher prices.\n",
        "\n",
        "* **Fuel_Type:** indicates the type of fuel used by the car:\n",
        "\n",
        "* **Transmission**: The type of transmission in the car:\n",
        "\n",
        "* **Mileage:** The total distance the car has traveled, measured in kilometers. Lower mileage generally indicates a higher price.\n",
        "\n",
        "* **Doors:** The number of doors in the car. Commonly 2, 3, 4, or 5 doors.\n",
        "\n",
        "* **Owner_Count:** The number of previous owners of the car. Fewer owners generally indicate a higher price.\n",
        "\n",
        "* **Price:** The estimated selling price of the car. It is calculated based on several factors such as production year, engine size, mileage, fuel type, and transmission."
      ],
      "metadata": {
        "id": "a80b18370e28f224"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **1. Import Required Libraries**"
      ],
      "metadata": {
        "id": "793436e54f98d446"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "18662c7b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3bb798b9-4b8b-4204-d2dd-645bed369540"
      },
      "source": [
        "%pip install catboost"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting catboost\n",
            "  Downloading catboost-1.2.8-cp311-cp311-manylinux2014_x86_64.whl.metadata (1.2 kB)\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.11/dist-packages (from catboost) (0.21)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from catboost) (3.10.0)\n",
            "Requirement already satisfied: numpy<3.0,>=1.16.0 in /usr/local/lib/python3.11/dist-packages (from catboost) (2.0.2)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.11/dist-packages (from catboost) (2.2.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from catboost) (1.15.3)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (from catboost) (5.24.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from catboost) (1.17.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (4.58.4)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (3.2.3)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly->catboost) (8.5.0)\n",
            "Downloading catboost-1.2.8-cp311-cp311-manylinux2014_x86_64.whl (99.2 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m99.2/99.2 MB\u001b[0m \u001b[31m7.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: catboost\n",
            "Successfully installed catboost-1.2.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.express as px\n",
        "import itertools\n",
        "import plotly.graph_objects as go\n",
        "import time\n",
        "\n",
        "from catboost import CatBoostRegressor\n",
        "from lightgbm import LGBMRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.exceptions import ConvergenceWarning\n",
        "from sklearn.linear_model import LogisticRegression, LinearRegression, Ridge, Lasso, ElasticNet\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split, cross_val_score,GridSearchCV\n",
        "from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler\n",
        "\n",
        "import warnings\n",
        "warnings.simplefilter(action=\"ignore\")"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T18:29:12.881292Z",
          "start_time": "2025-02-21T18:29:12.770492Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.368156Z",
          "iopub.execute_input": "2025-02-23T07:36:19.368474Z",
          "iopub.status.idle": "2025-02-23T07:36:19.375594Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.368439Z",
          "shell.execute_reply": "2025-02-23T07:36:19.374525Z"
        },
        "id": "9f9fa3ef8b1970cf"
      },
      "outputs": [],
      "execution_count": 9
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **2. Adjusting Row Column Settings**"
      ],
      "metadata": {
        "id": "b6d9ff42cb6731b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pd.set_option('display.max_columns', 500)\n",
        "pd.set_option('display.width', None)\n",
        "pd.set_option('display.max_rows', 20)\n",
        "pd.set_option('display.float_format', lambda x: '%.3f' % x)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T19:55:49.330692Z",
          "start_time": "2025-02-21T19:55:49.29874Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.376902Z",
          "iopub.execute_input": "2025-02-23T07:36:19.37728Z",
          "iopub.status.idle": "2025-02-23T07:36:19.394704Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.377252Z",
          "shell.execute_reply": "2025-02-23T07:36:19.393792Z"
        },
        "id": "debab856b2ded546"
      },
      "outputs": [],
      "execution_count": 10
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **3. Loading the data Set**"
      ],
      "metadata": {
        "id": "803612eb3e210317"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('car_price_dataset.csv')"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T19:54:52.688509Z",
          "start_time": "2025-02-21T19:54:52.563562Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.396489Z",
          "iopub.execute_input": "2025-02-23T07:36:19.39681Z",
          "iopub.status.idle": "2025-02-23T07:36:19.426961Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.396785Z",
          "shell.execute_reply": "2025-02-23T07:36:19.425928Z"
        },
        "id": "b4b637bed00e706e"
      },
      "outputs": [],
      "execution_count": 11
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **4. Exploratory Data Analysis**"
      ],
      "metadata": {
        "id": "b2d9be96cf86d4e1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def check_df(dataframe, head=5):\n",
        "    print(\"##################### Shape #####################\")\n",
        "    print(dataframe.shape)\n",
        "    print(\"##################### Types #####################\")\n",
        "    print(dataframe.dtypes)\n",
        "    print(\"##################### Head #####################\")\n",
        "    print(dataframe.head(head))\n",
        "    print(\"##################### Tail #####################\")\n",
        "    print(dataframe.tail(head))\n",
        "    print(\"##################### NA #####################\")\n",
        "    print(dataframe.isnull().sum())\n",
        "    print(\"##################### Quantiles #####################\")\n",
        "    numeric_df = df.select_dtypes(include='number')\n",
        "    # quantile() işlemi\n",
        "    quantiles = numeric_df.quantile([0, 0.05, 0.25, 0.50, 0.75, 0.90, 0.95, 0.99, 1]).T\n",
        "    print(quantiles)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T19:54:54.371269Z",
          "start_time": "2025-02-21T19:54:54.362106Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.428168Z",
          "iopub.execute_input": "2025-02-23T07:36:19.428472Z",
          "iopub.status.idle": "2025-02-23T07:36:19.433997Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.428447Z",
          "shell.execute_reply": "2025-02-23T07:36:19.43297Z"
        },
        "id": "15a473c201b003f7"
      },
      "outputs": [],
      "execution_count": 12
    },
    {
      "cell_type": "code",
      "source": [
        "check_df(df)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T19:55:51.693932Z",
          "start_time": "2025-02-21T19:55:51.643205Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.434859Z",
          "iopub.execute_input": "2025-02-23T07:36:19.435086Z",
          "iopub.status.idle": "2025-02-23T07:36:19.478036Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.435066Z",
          "shell.execute_reply": "2025-02-23T07:36:19.477208Z"
        },
        "id": "28f2dd0ec986f172",
        "outputId": "e92cd651-4cde-4346-c32d-b9b9fd65e9ce",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "##################### Shape #####################\n",
            "(10000, 10)\n",
            "##################### Types #####################\n",
            "Brand            object\n",
            "Model            object\n",
            "Year              int64\n",
            "Engine_Size     float64\n",
            "Fuel_Type        object\n",
            "Transmission     object\n",
            "Mileage           int64\n",
            "Doors             int64\n",
            "Owner_Count       int64\n",
            "Price             int64\n",
            "dtype: object\n",
            "##################### Head #####################\n",
            "        Brand   Model  Year  Engine_Size Fuel_Type    Transmission  Mileage  \\\n",
            "0         Kia     Rio  2020        4.200    Diesel          Manual   289944   \n",
            "1   Chevrolet  Malibu  2012        2.000    Hybrid       Automatic     5356   \n",
            "2    Mercedes     GLA  2020        4.200    Diesel       Automatic   231440   \n",
            "3        Audi      Q5  2023        2.000  Electric          Manual   160971   \n",
            "4  Volkswagen    Golf  2003        2.600    Hybrid  Semi-Automatic   286618   \n",
            "\n",
            "   Doors  Owner_Count  Price  \n",
            "0      3            5   8501  \n",
            "1      2            3  12092  \n",
            "2      4            2  11171  \n",
            "3      2            1  11780  \n",
            "4      3            3   2867  \n",
            "##################### Tail #####################\n",
            "           Brand     Model  Year  Engine_Size Fuel_Type    Transmission  \\\n",
            "9995         Kia    Optima  2004        3.700    Diesel  Semi-Automatic   \n",
            "9996   Chevrolet    Impala  2002        1.400  Electric       Automatic   \n",
            "9997         BMW  3 Series  2010        3.000    Petrol       Automatic   \n",
            "9998        Ford  Explorer  2002        1.400    Hybrid       Automatic   \n",
            "9999  Volkswagen    Tiguan  2001        2.100    Diesel          Manual   \n",
            "\n",
            "      Mileage  Doors  Owner_Count  Price  \n",
            "9995     5794      2            4   8884  \n",
            "9996   168000      2            1   6240  \n",
            "9997    86664      5            1   9866  \n",
            "9998   225772      4            1   4084  \n",
            "9999   157882      3            3   3342  \n",
            "##################### NA #####################\n",
            "Brand           0\n",
            "Model           0\n",
            "Year            0\n",
            "Engine_Size     0\n",
            "Fuel_Type       0\n",
            "Transmission    0\n",
            "Mileage         0\n",
            "Doors           0\n",
            "Owner_Count     0\n",
            "Price           0\n",
            "dtype: int64\n",
            "##################### Quantiles #####################\n",
            "               0.000     0.050     0.250      0.500      0.750      0.900  \\\n",
            "Year        2000.000  2001.000  2006.000   2012.000   2017.000   2021.000   \n",
            "Engine_Size    1.000     1.200     2.000      3.000      4.000      4.600   \n",
            "Mileage       25.000 14336.200 74649.250 149587.000 223577.500 269373.400   \n",
            "Doors          2.000     2.000     3.000      3.000      4.000      5.000   \n",
            "Owner_Count    1.000     1.000     2.000      3.000      4.000      5.000   \n",
            "Price       2000.000  3655.000  6646.000   8858.500  11086.500  12945.300   \n",
            "\n",
            "                 0.950      0.990      1.000  \n",
            "Year          2022.000   2023.000   2023.000  \n",
            "Engine_Size      4.800      5.000      5.000  \n",
            "Mileage     284443.700 296474.030 299947.000  \n",
            "Doors            5.000      5.000      5.000  \n",
            "Owner_Count      5.000      5.000      5.000  \n",
            "Price        13981.050  15745.080  18301.000  \n"
          ]
        }
      ],
      "execution_count": 13
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T18:02:49.824848Z",
          "start_time": "2025-02-21T18:02:49.804863Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.478909Z",
          "iopub.execute_input": "2025-02-23T07:36:19.47923Z",
          "iopub.status.idle": "2025-02-23T07:36:19.491857Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.479206Z",
          "shell.execute_reply": "2025-02-23T07:36:19.490856Z"
        },
        "id": "a7d929504174e544",
        "outputId": "52772a82-df35-4a1e-e375-b9834e185293",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Brand     Model  Year  Engine_Size Fuel_Type    Transmission  \\\n",
              "0            Kia       Rio  2020        4.200    Diesel          Manual   \n",
              "1      Chevrolet    Malibu  2012        2.000    Hybrid       Automatic   \n",
              "2       Mercedes       GLA  2020        4.200    Diesel       Automatic   \n",
              "3           Audi        Q5  2023        2.000  Electric          Manual   \n",
              "4     Volkswagen      Golf  2003        2.600    Hybrid  Semi-Automatic   \n",
              "...          ...       ...   ...          ...       ...             ...   \n",
              "9995         Kia    Optima  2004        3.700    Diesel  Semi-Automatic   \n",
              "9996   Chevrolet    Impala  2002        1.400  Electric       Automatic   \n",
              "9997         BMW  3 Series  2010        3.000    Petrol       Automatic   \n",
              "9998        Ford  Explorer  2002        1.400    Hybrid       Automatic   \n",
              "9999  Volkswagen    Tiguan  2001        2.100    Diesel          Manual   \n",
              "\n",
              "      Mileage  Doors  Owner_Count  Price  \n",
              "0      289944      3            5   8501  \n",
              "1        5356      2            3  12092  \n",
              "2      231440      4            2  11171  \n",
              "3      160971      2            1  11780  \n",
              "4      286618      3            3   2867  \n",
              "...       ...    ...          ...    ...  \n",
              "9995     5794      2            4   8884  \n",
              "9996   168000      2            1   6240  \n",
              "9997    86664      5            1   9866  \n",
              "9998   225772      4            1   4084  \n",
              "9999   157882      3            3   3342  \n",
              "\n",
              "[10000 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d3d04eb5-0bdb-4fcb-b0b2-3b546653b10b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Year</th>\n",
              "      <th>Engine_Size</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Owner_Count</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Kia</td>\n",
              "      <td>Rio</td>\n",
              "      <td>2020</td>\n",
              "      <td>4.200</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>289944</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>8501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Chevrolet</td>\n",
              "      <td>Malibu</td>\n",
              "      <td>2012</td>\n",
              "      <td>2.000</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>5356</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>12092</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Mercedes</td>\n",
              "      <td>GLA</td>\n",
              "      <td>2020</td>\n",
              "      <td>4.200</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>231440</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>11171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Audi</td>\n",
              "      <td>Q5</td>\n",
              "      <td>2023</td>\n",
              "      <td>2.000</td>\n",
              "      <td>Electric</td>\n",
              "      <td>Manual</td>\n",
              "      <td>160971</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>11780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>Golf</td>\n",
              "      <td>2003</td>\n",
              "      <td>2.600</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>Semi-Automatic</td>\n",
              "      <td>286618</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>Kia</td>\n",
              "      <td>Optima</td>\n",
              "      <td>2004</td>\n",
              "      <td>3.700</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Semi-Automatic</td>\n",
              "      <td>5794</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>8884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>Chevrolet</td>\n",
              "      <td>Impala</td>\n",
              "      <td>2002</td>\n",
              "      <td>1.400</td>\n",
              "      <td>Electric</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>168000</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>6240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>BMW</td>\n",
              "      <td>3 Series</td>\n",
              "      <td>2010</td>\n",
              "      <td>3.000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>86664</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>9866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>Ford</td>\n",
              "      <td>Explorer</td>\n",
              "      <td>2002</td>\n",
              "      <td>1.400</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>225772</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>4084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>Tiguan</td>\n",
              "      <td>2001</td>\n",
              "      <td>2.100</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>157882</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3342</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3d04eb5-0bdb-4fcb-b0b2-3b546653b10b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d3d04eb5-0bdb-4fcb-b0b2-3b546653b10b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d3d04eb5-0bdb-4fcb-b0b2-3b546653b10b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6a651703-84c4-4575-8007-98d75bcc00e9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a651703-84c4-4575-8007-98d75bcc00e9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6a651703-84c4-4575-8007-98d75bcc00e9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_b9e8cbfc-b97e-4235-8ccc-6868ce596a7f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b9e8cbfc-b97e-4235-8ccc-6868ce596a7f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Hyundai\",\n          \"Chevrolet\",\n          \"Toyota\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"C-Class\",\n          \"A3\",\n          \"A4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 2000,\n        \"max\": 2023,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          2005,\n          2018,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine_Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.149324053945646,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          1.0,\n          2.9,\n          4.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Hybrid\",\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Manual\",\n          \"Automatic\",\n          \"Semi-Automatic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86322,\n        \"min\": 25,\n        \"max\": 299947,\n        \"num_unique_values\": 9854,\n        \"samples\": [\n          144244,\n          105615,\n          8332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Doors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3112,\n        \"min\": 2000,\n        \"max\": 18301,\n        \"num_unique_values\": 6661,\n        \"samples\": [\n          10460,\n          8448,\n          12616\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "execution_count": 14
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **5. Capturing / Detecting Numeric and Categorical Variables**"
      ],
      "metadata": {
        "id": "417d300d5060b675"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def grab_col_names(dataframe, cat_th=10, car_th=31):\n",
        "    \"\"\"\n",
        "\n",
        "    Returns the names of categorical, numeric and categorical but cardinal variables in the data set.\n",
        "    Note Categorical variables include categorical variables with numeric appearance.\n",
        "\n",
        "    Parameters\n",
        "    ------\n",
        "        dataframe: dataframe\n",
        "                Variable names of the dataframe to be taken\n",
        "        cat_th: int, optional\n",
        "                class threshold for numeric but categorical variables\n",
        "        car_th: int, optinal\n",
        "                class threshold for categorical but cardinal variables\n",
        "\n",
        "    Returns\n",
        "    ------\n",
        "        cat_cols: list\n",
        "                Categorical variable list\n",
        "        num_cols: list\n",
        "                Numeric variable list\n",
        "        cat_but_car: list\n",
        "                List of cardinal variables with categorical appearance\n",
        "\n",
        "    Examples\n",
        "    ------\n",
        "        import seaborn as sns\n",
        "        df = sns.load_dataset(\"iris\")\n",
        "        print(grab_col_names(df))\n",
        "\n",
        "\n",
        "    Notes\n",
        "    ------\n",
        "        cat_cols + num_cols + cat_but_car = total number of variables\n",
        "        num_but_cat is inside cat_cols.\n",
        "        The sum of the 3 return lists equals the total number of variables: cat_cols + num_cols + cat_but_car = number of variables\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    # cat_cols, cat_but_car\n",
        "    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n",
        "\n",
        "    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n",
        "                   dataframe[col].dtypes != \"O\"]\n",
        "\n",
        "    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n",
        "                   dataframe[col].dtypes == \"O\"]\n",
        "\n",
        "    cat_cols = cat_cols + num_but_cat\n",
        "\n",
        "    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n",
        "\n",
        "    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n",
        "\n",
        "    num_cols = [col for col in num_cols if col not in num_but_cat]\n",
        "\n",
        "    print(f\"Observations: {dataframe.shape[0]}\")\n",
        "    print(f\"Variables: {dataframe.shape[1]}\")\n",
        "    print(f'cat_cols: {len(cat_cols)}')\n",
        "    print(f'num_cols: {len(num_cols)}')\n",
        "    print(f'cat_but_car: {len(cat_but_car)}')\n",
        "    print(f'num_but_cat: {len(num_but_cat)}')\n",
        "\n",
        "\n",
        "    return cat_cols, num_cols, cat_but_car, num_but_cat"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T19:59:26.502131Z",
          "start_time": "2025-02-21T19:59:26.443911Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.493709Z",
          "iopub.execute_input": "2025-02-23T07:36:19.494016Z",
          "iopub.status.idle": "2025-02-23T07:36:19.505264Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.493988Z",
          "shell.execute_reply": "2025-02-23T07:36:19.504394Z"
        },
        "id": "2f5e068109b6e42c"
      },
      "outputs": [],
      "execution_count": 15
    },
    {
      "cell_type": "code",
      "source": [
        "cat_cols, num_cols, cat_but_car,  num_but_cat = grab_col_names(df)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:00:42.098311Z",
          "start_time": "2025-02-21T20:00:41.848132Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.506618Z",
          "iopub.execute_input": "2025-02-23T07:36:19.506919Z",
          "iopub.status.idle": "2025-02-23T07:36:19.535857Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.506893Z",
          "shell.execute_reply": "2025-02-23T07:36:19.535002Z"
        },
        "id": "dca48a217660393d",
        "outputId": "42680549-4c32-4185-e79c-e6f0df3ee787",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Observations: 10000\n",
            "Variables: 10\n",
            "cat_cols: 6\n",
            "num_cols: 4\n",
            "cat_but_car: 0\n",
            "num_but_cat: 2\n"
          ]
        }
      ],
      "execution_count": 16
    },
    {
      "cell_type": "code",
      "source": [
        "cat_cols"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:00:53.884425Z",
          "start_time": "2025-02-21T20:00:53.852795Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.536726Z",
          "iopub.execute_input": "2025-02-23T07:36:19.536995Z",
          "iopub.status.idle": "2025-02-23T07:36:19.542295Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.536971Z",
          "shell.execute_reply": "2025-02-23T07:36:19.541403Z"
        },
        "id": "249fcf46b31557bb",
        "outputId": "870a4f30-38d6-41ff-d736-ef28d12f7e37",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Brand', 'Model', 'Fuel_Type', 'Transmission', 'Doors', 'Owner_Count']"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "execution_count": 17
    },
    {
      "cell_type": "code",
      "source": [
        "num_cols"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:00:57.281225Z",
          "start_time": "2025-02-21T20:00:57.275951Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.543198Z",
          "iopub.execute_input": "2025-02-23T07:36:19.543471Z",
          "iopub.status.idle": "2025-02-23T07:36:19.558246Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.543449Z",
          "shell.execute_reply": "2025-02-23T07:36:19.557105Z"
        },
        "id": "9ed6eac50dd851ee",
        "outputId": "63d8fb90-a989-47d6-fae9-c5dbc98f4627",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Year', 'Engine_Size', 'Mileage', 'Price']"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "execution_count": 18
    },
    {
      "cell_type": "code",
      "source": [
        "cat_but_car"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:00:58.668205Z",
          "start_time": "2025-02-21T20:00:58.663954Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.559352Z",
          "iopub.execute_input": "2025-02-23T07:36:19.559747Z",
          "iopub.status.idle": "2025-02-23T07:36:19.573736Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.559721Z",
          "shell.execute_reply": "2025-02-23T07:36:19.572632Z"
        },
        "id": "fe142ca8e4871fb2",
        "outputId": "5f623cc3-532d-4a5f-e3b9-13f709dc43b9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "execution_count": 19
    },
    {
      "cell_type": "code",
      "source": [
        "num_but_cat"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:01:00.095778Z",
          "start_time": "2025-02-21T20:01:00.085907Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.574883Z",
          "iopub.execute_input": "2025-02-23T07:36:19.575253Z",
          "iopub.status.idle": "2025-02-23T07:36:19.590649Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.575218Z",
          "shell.execute_reply": "2025-02-23T07:36:19.589814Z"
        },
        "id": "7b1ab159925a77e2",
        "outputId": "fcb73275-5b76-4d78-9636-40655292ee02",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Doors', 'Owner_Count']"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "execution_count": 20
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Model\"].nunique()"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T18:03:04.260857Z",
          "start_time": "2025-02-21T18:03:04.255949Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.593692Z",
          "iopub.execute_input": "2025-02-23T07:36:19.593983Z",
          "iopub.status.idle": "2025-02-23T07:36:19.606624Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.593957Z",
          "shell.execute_reply": "2025-02-23T07:36:19.605794Z"
        },
        "id": "ccb175efee5f583c",
        "outputId": "486420ee-1566-4be8-a536-a4f0abec98c8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "execution_count": 21
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **6. Analysis of Categorical Variables**"
      ],
      "metadata": {
        "id": "68f03cc395ed0001"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cat_summary(dataframe, col_name, plot=False):\n",
        "    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n",
        "                        \"Ratio\": 100 * dataframe[col_name].value_counts() / len(dataframe)}))\n",
        "    print(\"##########################################\")\n",
        "    if plot:\n",
        "        sns.countplot(x=dataframe[col_name], data=dataframe, palette=\"Set2\")\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.show(block=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:02:54.307903Z",
          "start_time": "2025-02-21T20:02:54.269373Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.608476Z",
          "iopub.execute_input": "2025-02-23T07:36:19.608735Z",
          "iopub.status.idle": "2025-02-23T07:36:19.619236Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.608712Z",
          "shell.execute_reply": "2025-02-23T07:36:19.61832Z"
        },
        "id": "d9dca38507926eca"
      },
      "outputs": [],
      "execution_count": 22
    },
    {
      "cell_type": "code",
      "source": [
        "for col in cat_cols:\n",
        "    cat_summary(df, col, plot=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:03:06.433683Z",
          "start_time": "2025-02-21T20:03:04.80821Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:19.620051Z",
          "iopub.execute_input": "2025-02-23T07:36:19.620347Z",
          "iopub.status.idle": "2025-02-23T07:36:20.893067Z",
          "shell.execute_reply.started": "2025-02-23T07:36:19.620323Z",
          "shell.execute_reply": "2025-02-23T07:36:20.892132Z"
        },
        "id": "c3d3f61e01ed1310",
        "outputId": "68cd4092-c55f-42f4-a646-8a64d1f386a6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            Brand  Ratio\n",
            "Brand                   \n",
            "Ford         1048 10.480\n",
            "Audi         1038 10.380\n",
            "Volkswagen   1020 10.200\n",
            "Honda        1009 10.090\n",
            "Chevrolet    1003 10.030\n",
            "BMW           999  9.990\n",
            "Hyundai       995  9.950\n",
            "Kia           976  9.760\n",
            "Toyota        970  9.700\n",
            "Mercedes      942  9.420\n",
            "##########################################\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          Model  Ratio\n",
            "Model                 \n",
            "Accord      365  3.650\n",
            "Fiesta      363  3.630\n",
            "Impala      355  3.550\n",
            "5 Series    353  3.530\n",
            "Tiguan      352  3.520\n",
            "...         ...    ...\n",
            "GLA         315  3.150\n",
            "Sportage    313  3.130\n",
            "X5          311  3.110\n",
            "CR-V        308  3.080\n",
            "C-Class     306  3.060\n",
            "\n",
            "[30 rows x 2 columns]\n",
            "##########################################\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           Fuel_Type  Ratio\n",
            "Fuel_Type                  \n",
            "Electric        2625 26.250\n",
            "Diesel          2512 25.120\n",
            "Hybrid          2453 24.530\n",
            "Petrol          2410 24.100\n",
            "##########################################\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                Transmission  Ratio\n",
            "Transmission                       \n",
            "Manual                  3372 33.720\n",
            "Automatic               3317 33.170\n",
            "Semi-Automatic          3311 33.110\n",
            "##########################################\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       Doors  Ratio\n",
            "Doors              \n",
            "3       2575 25.750\n",
            "4       2514 25.140\n",
            "5       2456 24.560\n",
            "2       2455 24.550\n",
            "##########################################\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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IH59y+zbjBw50vpzQkKCunfvrltuuUXbtm3ToEGDGu1xs7KylJmZad33eDxEEQAAzVhAv0L0dTfffLM6d+6sTz75RJLkdDp1+vRpnzWXLl1SWVmZdd2R0+lUaWmpz5q6+1e6Nslutys0NNTnBgAAmq96BdHAgQNVXl5+2XaPx6OBAwf+0Jmu6K9//au++OILRUZGSpJcLpfKy8tVVFRkrdmyZYtqa2vVt29fa8327dtVXV1trcnLy1OXLl103XXXNdqsAADg2lGvINq2bZuqqqou237x4kW999573/k4586dU3FxsYqLiyVJx48fV3FxsUpKSnTu3DlNmTJFu3fv1qeffqr8/Hzde++9uvXWW5WamipJiouLU1pamiZOnKg9e/Zo586dysjI0MiRIxUVFSVJGj16tIKDgzVhwgQdPHhQa9as0QsvvODzlhgAADDb97qGaN++fdafDx065HNRck1NjXJzc3X99dd/5+Pt3btXAwYMsO7XRcq4ceO0dOlS7du3T6+88orKy8sVFRWlwYMHa/bs2bLb7dbXrFy5UhkZGRo0aJCCgoI0YsQILVq0yNofFhamTZs2KT09Xb169VLnzp2VnZ3NR+4BAIDlewVRjx49rN8Y/U1vjYWEhGjx4sXf+XjJycnyer1X3L9x48ZvPUbHjh21atWqq67p3r3793rlCgAAmOV7BdHx48fl9Xp18803a8+ePQoPD7f2BQcHKyIiQi1atGjwIQEAABrT9wqimJgYSVJtbW2jDAMAAOAP9f49REePHtXWrVt1+vTpywIpOzv7Bw8GAADQVOoVRL/73e80adIkde7cWU6nUzabzdpns9kIIgAAcE2pVxDNmTNHzz33nKZNm9bQ8wAAADS5ev0eojNnzugnP/lJQ88CAADgF/UKop/85CfatGlTQ88CAADgF/V6y+zWW2/VM888o927dyshIUGtWrXy2f+LX/yiQYYDAABoCvUKohdffFHt2rVTQUGBCgoKfPbZbDaCCAAAXFPqFUTHjx9v6DkAAAD8pl7XEAEAADQn9XqF6OGHH77q/uXLl9drGAAAAH+oVxCdOXPG5351dbUOHDig8vLyb/yfvgIAAASyegXRm2++edm22tpaTZo0SbfccssPHgoAAKApNdg1REFBQcrMzNSCBQsa6pAAAABNokEvqj527JguXbrUkIcEAABodPV6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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             Owner_Count  Ratio\n",
            "Owner_Count                    \n",
            "5                   2036 20.360\n",
            "1                   2036 20.360\n",
            "2                   2020 20.200\n",
            "3                   1977 19.770\n",
            "4                   1931 19.310\n",
            "##########################################\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 23
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **7. Analysis of Numerical Variables**"
      ],
      "metadata": {
        "id": "c492934fef5aa08d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def num_summary(dataframe, col_name, plot=False):\n",
        "    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n",
        "    print(dataframe[col_name].describe(quantiles).T)\n",
        "\n",
        "    if plot:\n",
        "        sns.histplot(data=dataframe, x=col_name, bins=20, kde=True, color=\"blue\")\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.show(block=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:04:19.068044Z",
          "start_time": "2025-02-21T20:04:19.029551Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:20.89406Z",
          "iopub.execute_input": "2025-02-23T07:36:20.894378Z",
          "iopub.status.idle": "2025-02-23T07:36:20.899622Z",
          "shell.execute_reply.started": "2025-02-23T07:36:20.894354Z",
          "shell.execute_reply": "2025-02-23T07:36:20.898551Z"
        },
        "id": "c4be86630e724267"
      },
      "outputs": [],
      "execution_count": 24
    },
    {
      "cell_type": "code",
      "source": [
        "for col in num_cols:\n",
        "    num_summary(df, col, plot=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:04:22.305761Z",
          "start_time": "2025-02-21T20:04:20.985125Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:20.900744Z",
          "iopub.execute_input": "2025-02-23T07:36:20.901263Z",
          "iopub.status.idle": "2025-02-23T07:36:21.867344Z",
          "shell.execute_reply.started": "2025-02-23T07:36:20.901226Z",
          "shell.execute_reply": "2025-02-23T07:36:21.866382Z"
        },
        "id": "8c215fb0422f0d2f",
        "outputId": "491fb57a-1e02-4f9f-ae8a-65335cebe499",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count   10000.000\n",
            "mean     2011.544\n",
            "std         6.898\n",
            "min      2000.000\n",
            "5%       2001.000\n",
            "10%      2002.000\n",
            "20%      2004.000\n",
            "30%      2007.000\n",
            "40%      2009.000\n",
            "50%      2012.000\n",
            "60%      2014.000\n",
            "70%      2016.000\n",
            "80%      2019.000\n",
            "90%      2021.000\n",
            "95%      2022.000\n",
            "99%      2023.000\n",
            "max      2023.000\n",
            "Name: Year, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count   10000.000\n",
            "mean        3.001\n",
            "std         1.149\n",
            "min         1.000\n",
            "5%          1.200\n",
            "10%         1.400\n",
            "20%         1.800\n",
            "30%         2.200\n",
            "40%         2.600\n",
            "50%         3.000\n",
            "60%         3.400\n",
            "70%         3.800\n",
            "80%         4.200\n",
            "90%         4.600\n",
            "95%         4.800\n",
            "99%         5.000\n",
            "max         5.000\n",
            "Name: Engine_Size, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    10000.000\n",
            "mean    149239.112\n",
            "std      86322.349\n",
            "min         25.000\n",
            "5%       14336.200\n",
            "10%      29586.500\n",
            "20%      59307.000\n",
            "30%      89633.600\n",
            "40%     119878.200\n",
            "50%     149587.000\n",
            "60%     179242.400\n",
            "70%     208518.000\n",
            "80%     238265.600\n",
            "90%     269373.400\n",
            "95%     284443.700\n",
            "99%     296474.030\n",
            "max     299947.000\n",
            "Name: Mileage, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count   10000.000\n",
            "mean     8852.964\n",
            "std      3112.597\n",
            "min      2000.000\n",
            "5%       3655.000\n",
            "10%      4672.400\n",
            "20%      6067.400\n",
            "30%      7127.700\n",
            "40%      8038.000\n",
            "50%      8858.500\n",
            "60%      9701.400\n",
            "70%     10577.000\n",
            "80%     11602.600\n",
            "90%     12945.300\n",
            "95%     13981.050\n",
            "99%     15745.080\n",
            "max     18301.000\n",
            "Name: Price, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 25
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **8. Analysis of Categorical Variables by Target**"
      ],
      "metadata": {
        "id": "e9c5e98282424957"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def target_summary_with_cat(dataframe, target, categorical_col, plot=False):\n",
        "    print(pd.DataFrame({'TARGET_MEAN': dataframe.groupby(categorical_col)[target].mean()}), end='\\n\\n\\n')\n",
        "    if plot:\n",
        "        sns.barplot(x=categorical_col, y=target, data=dataframe, palette=\"Set2\")\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.show(block=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:08:21.524156Z",
          "start_time": "2025-02-21T20:08:21.433642Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:21.868348Z",
          "iopub.execute_input": "2025-02-23T07:36:21.868715Z",
          "iopub.status.idle": "2025-02-23T07:36:21.873856Z",
          "shell.execute_reply.started": "2025-02-23T07:36:21.86868Z",
          "shell.execute_reply": "2025-02-23T07:36:21.872931Z"
        },
        "id": "cc17342da1425b6c"
      },
      "outputs": [],
      "execution_count": 26
    },
    {
      "cell_type": "code",
      "source": [
        "for col in cat_cols:\n",
        "    target_summary_with_cat(df, \"Price\", col, plot=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:08:25.515198Z",
          "start_time": "2025-02-21T20:08:23.093189Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:21.87479Z",
          "iopub.execute_input": "2025-02-23T07:36:21.875076Z",
          "iopub.status.idle": "2025-02-23T07:36:24.518201Z",
          "shell.execute_reply.started": "2025-02-23T07:36:21.875043Z",
          "shell.execute_reply": "2025-02-23T07:36:24.517229Z"
        },
        "id": "c9841422770ca16d",
        "outputId": "b0f0be3f-4a44-499b-f470-08833c37b358",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            TARGET_MEAN\n",
            "Brand                  \n",
            "Audi           8929.374\n",
            "BMW            8704.068\n",
            "Chevrolet      9015.684\n",
            "Ford           8852.571\n",
            "Honda          8665.597\n",
            "Hyundai        8778.279\n",
            "Kia            8880.086\n",
            "Mercedes       8980.087\n",
            "Toyota         8798.185\n",
            "Volkswagen     8928.377\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          TARGET_MEAN\n",
            "Model                \n",
            "3 Series     8854.752\n",
            "5 Series     8669.218\n",
            "A3           8912.317\n",
            "A4           8919.963\n",
            "Accord       8743.762\n",
            "...               ...\n",
            "Sonata       8740.831\n",
            "Sportage     8867.636\n",
            "Tiguan       9098.864\n",
            "Tucson       8789.070\n",
            "X5           8581.312\n",
            "\n",
            "[30 rows x 1 columns]\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           TARGET_MEAN\n",
            "Fuel_Type             \n",
            "Diesel        8117.336\n",
            "Electric     10032.220\n",
            "Hybrid        9113.030\n",
            "Petrol        8070.562\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                TARGET_MEAN\n",
            "Transmission               \n",
            "Automatic          9938.253\n",
            "Manual             8363.426\n",
            "Semi-Automatic     8264.266\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       TARGET_MEAN\n",
            "Doors             \n",
            "2         8928.931\n",
            "3         8746.447\n",
            "4         8841.588\n",
            "5         8900.353\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             TARGET_MEAN\n",
            "Owner_Count             \n",
            "1               8841.374\n",
            "2               8847.258\n",
            "3               8847.919\n",
            "4               8869.173\n",
            "5               8859.742\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 27
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **9. Analysis of Numeric Variables by Target**"
      ],
      "metadata": {
        "id": "601d3400002b13cb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def target_summary_with_num(dataframe, target, numerical_col, plot=False):\n",
        "    print(pd.DataFrame({numerical_col+'_mean': dataframe.groupby(target)[numerical_col].mean()}), end='\\n\\n\\n')\n",
        "    if plot:\n",
        "        sns.barplot(x=target, y=numerical_col, data=dataframe)\n",
        "        plt.show(block=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:12:05.916426Z",
          "start_time": "2025-02-21T20:12:05.792348Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:24.519074Z",
          "iopub.execute_input": "2025-02-23T07:36:24.519371Z",
          "iopub.status.idle": "2025-02-23T07:36:24.52421Z",
          "shell.execute_reply.started": "2025-02-23T07:36:24.519343Z",
          "shell.execute_reply": "2025-02-23T07:36:24.523296Z"
        },
        "id": "3e15540a736963d4"
      },
      "outputs": [],
      "execution_count": 28
    },
    {
      "cell_type": "code",
      "source": [
        "for col in num_cols:\n",
        "    target_summary_with_num(df, \"Price\", col, plot=False)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:12:07.786829Z",
          "start_time": "2025-02-21T20:12:07.685565Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:24.525219Z",
          "iopub.execute_input": "2025-02-23T07:36:24.525544Z",
          "iopub.status.idle": "2025-02-23T07:36:24.554265Z",
          "shell.execute_reply.started": "2025-02-23T07:36:24.525519Z",
          "shell.execute_reply": "2025-02-23T07:36:24.553453Z"
        },
        "id": "24c6f2dd32a88bd9",
        "outputId": "950f30e3-9d17-492c-9d34-64985b557706",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       Year_mean\n",
            "Price           \n",
            "2000    2001.742\n",
            "2007    2008.000\n",
            "2019    2007.000\n",
            "2032    2002.000\n",
            "2042    2001.000\n",
            "...          ...\n",
            "17899   2023.000\n",
            "17906   2022.000\n",
            "18017   2020.000\n",
            "18255   2023.000\n",
            "18301   2021.000\n",
            "\n",
            "[6661 rows x 1 columns]\n",
            "\n",
            "\n",
            "       Engine_Size_mean\n",
            "Price                  \n",
            "2000              1.745\n",
            "2007              1.300\n",
            "2019              1.400\n",
            "2032              2.200\n",
            "2042              1.400\n",
            "...                 ...\n",
            "17899             4.600\n",
            "17906             4.000\n",
            "18017             4.800\n",
            "18255             5.000\n",
            "18301             4.700\n",
            "\n",
            "[6661 rows x 1 columns]\n",
            "\n",
            "\n",
            "       Mileage_mean\n",
            "Price              \n",
            "2000     262524.215\n",
            "2007     289632.000\n",
            "2019     279031.000\n",
            "2032     243388.000\n",
            "2042     237884.000\n",
            "...             ...\n",
            "17899     10046.000\n",
            "17906     14658.000\n",
            "18017     19112.000\n",
            "18255     12234.000\n",
            "18301     14924.000\n",
            "\n",
            "[6661 rows x 1 columns]\n",
            "\n",
            "\n",
            "       Price_mean\n",
            "Price            \n",
            "2000     2000.000\n",
            "2007     2007.000\n",
            "2019     2019.000\n",
            "2032     2032.000\n",
            "2042     2042.000\n",
            "...           ...\n",
            "17899   17899.000\n",
            "17906   17906.000\n",
            "18017   18017.000\n",
            "18255   18255.000\n",
            "18301   18301.000\n",
            "\n",
            "[6661 rows x 1 columns]\n",
            "\n",
            "\n"
          ]
        }
      ],
      "execution_count": 29
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **10. Correlation Analysis**"
      ],
      "metadata": {
        "id": "6839d8dc1539687f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def high_correlated_cols2(dataframe, plot=False, corr_th=0.70):\n",
        "    # Sadece sayısal sütunları seçelim\n",
        "    numeric_df = dataframe.select_dtypes(include=[np.number])\n",
        "\n",
        "    # Korelasyon matrisi oluştur\n",
        "    corr = numeric_df.corr()\n",
        "    cor_matrix = corr.abs()\n",
        "\n",
        "    # Üst üçgen matrisini seç (gereksiz tekrarları kaldırmak için)\n",
        "    upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(bool))\n",
        "\n",
        "    # Korelasyonu eşikten yüksek olan sütun çiftlerini seçelim\n",
        "    high_corrs = [(col, row)\n",
        "                  for col in cor_matrix.columns\n",
        "                  for row in cor_matrix.index\n",
        "                  if not pd.isna(upper_triangle_matrix.loc[row, col]) and abs(\n",
        "            upper_triangle_matrix.loc[row, col]) > corr_th]\n",
        "\n",
        "    if plot:\n",
        "        # Isı haritasını çiz\n",
        "        plt.figure(figsize=(10, 6))\n",
        "        sns.heatmap(corr, annot=True, fmt=\".2f\", cmap=\"RdBu\")\n",
        "        plt.title(\"Korelasyon Isı Haritası\")\n",
        "        plt.show()\n",
        "\n",
        "    return high_corrs\n"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:17:29.11233Z",
          "start_time": "2025-02-21T20:17:28.925219Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:24.577438Z",
          "iopub.execute_input": "2025-02-23T07:36:24.577799Z",
          "iopub.status.idle": "2025-02-23T07:36:24.591249Z",
          "shell.execute_reply.started": "2025-02-23T07:36:24.577753Z",
          "shell.execute_reply": "2025-02-23T07:36:24.590425Z"
        },
        "id": "9b0e7b36bdb127a7"
      },
      "outputs": [],
      "execution_count": 30
    },
    {
      "cell_type": "code",
      "source": [
        "high_correlated_cols2(df, plot=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:17:31.193995Z",
          "start_time": "2025-02-21T20:17:30.520134Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:24.592067Z",
          "iopub.execute_input": "2025-02-23T07:36:24.592423Z",
          "iopub.status.idle": "2025-02-23T07:36:24.935921Z",
          "shell.execute_reply.started": "2025-02-23T07:36:24.592389Z",
          "shell.execute_reply": "2025-02-23T07:36:24.934988Z"
        },
        "id": "a05f3aa99803d7b9",
        "outputId": "0a5592a5-3f6c-4f43-c9c1-9aba0f064d57",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 563
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "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gI6ODurXr4/AwEBJmUgkQmBgIBo3bixz2xkZGQVu8jU1NQEAYrFYhXvxDlsAiIiIiKjU0ygh04D6+vpi0KBBaNCgARo1aoTly5cjPT0dQ4YMAQD4+PigYsWKki5EXbp0wdKlS+Hm5gZ3d3c8fvwYM2fORJcuXSQVAVVjBYCIiIiISEX69OmDly9fYtasWYiJiUHdunXh7+8vGRgcEREh9cR/xowZEAgEmDFjBiIjI2FhYYEuXbpg/vz5astRIFZX20IR6bgNLe4USI60Fe2LOwWiUkmgo1vcKZAc4mz1vWGTPt03DxyKOwWS4+Awj+JOQa660/9T27Zv/aK+KTmLA8cAEBERERF9QdgFiIiIiIhKPUERXtj1pWMLABERERHRF4QtAERERERU6pWUWYBKA7YAEBERERF9QdgCQERERESlnjrfBFzWsAJARERERKUeKwCKYxcgIiIiIqIvCFsAiIiIiKjU0+A0oApjCwARERER0ReELQBEREREVOpxDIDiPrkC8PjxYzx58gQtWrSAnp4exGKxUm9iS1vR/lNTITUxGHe8uFOgQqSv7VrcKZAcosz04k6B5BAIdYs7BSrEr11cijsFojJN6S5ACQkJ8PT0RNWqVdGpUydER0cDAL799ltMmjRJZQkSEREREX2MQEOgtqWsUboCMHHiRGhpaSEiIgL6+vqS8j59+sDf318lyRERERERkWop3QXo+PHjOHbsGCpVqiRVXqVKFTx79uyTEyMiIiIiUpRGGXxSry5KVwDS09Olnvy/lZiYCKFQ+ElJEREREREVhTJjUL9USncBat68ObZs2SL5LBAIIBKJsHDhQrRu3VolyRERERERkWop3QKwcOFCtG3bFteuXUN2djamTJmC4OBgJCYm4sKFC6rMkYiIiIioUAK+3UphSv9UtWrVwsOHD9GsWTN069YN6enp+Prrr3Hz5k04OTmpMkciIiIiIlKRT3oPgLGxMX788UdV5UJEREREpBQOAlac0i0Ajo6OGDJkCLKysqTK4+Pj4ejo+MmJERERERGR6indAvD06VNoaWmhefPmOHz4MKytrQEAeXl5nAaUiIiIiD6rsvjCLnVRugVAIBDA398flSpVQv369XH16lVV5kVERERERGqgdAVALBbDwMAA+/fvh4+PD1q2bAk/Pz9V5kZEREREpBCBQKC2paxRugvQ+z/G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jIiIiIioEFlZWUhJSZFaZL37Kjs7G9evX4enp6ekTENDA56enrh06ZLMbV+6dEkqHgC8vLzkxqsCKwBEREREVPqJRGpbFixYAGNjY6llwYIFBVKIj49HXl4erKyspMqtrKwQExMjM+2YmJgixasCpwElIiIiIirEtGnT4OvrK1UmFAqLKZtPxwoAEREREZV64jz1vQhMKBQqdMNvbm4OTU1NxMbGSpXHxsbC2tpa5jrW1tZFilcFdgEiIiIiIlIBHR0d1K9fH4GBgZIykUiEwMBANG7cWOY6jRs3looHgICAALnxqqBUC0BERARsbW0hEAikysViMZ4/fw47OzuVJEdEREREpBAl5utXB19fXwwaNAgNGjRAo0aNsHz5cqSnp2PIkCEAAB8fH1SsWFEyhmD8+PFo2bIllixZgs6dO2Pnzp24du0a/vzzT7XlqFQFoHLlyoiOjoalpaVUeWJiIipXrow8NTbBEBEREREVUEIqAH369MHLly8xa9YsxMTEoG7duvD395cM9I2IiIDGe1PdNmnSBNu3b8eMGTMwffp0VKlSBQcPHkStWrXUlqNSFQCxWFzg6T8ApKWlQVeXc5ITERER0ZdrzJgxGDNmjMzvTp8+XaCsd+/e6N27t5qzeqdIFYC3o58FAgFmzpwJfX19yXd5eXkICgpC3bp1VZogEREREdHHiEWi4k6h1ChSBeDmzZsA8lsA7t69Cx0dHcl3Ojo6cHV1xeTJk1WbIRERERERqUyRKgCnTp0CAAwZMgS///47jIyM1JIUEREREVGRlJAxAKWBUmMANm7cqOo8IM5+rfJtkmoIhBzXQaSMtBXtizsFksNg3PHiToEKkbaqQ3GnQFSmKVUBSE9Px6+//orAwEDExcVB9EGfq7CwMJUkR0RERESkELYAKEypCsCwYcNw5swZDBw4EBUqVJA5IxAREREREZU8SlUAjh49iiNHjqBp06aqzoeIiIiIqMg4C5DilKoAmJqawszMTNW5EBEREREph12AFKbx8ZCC5s2bh1mzZiEjI0PV+RARERERkRop1QKwZMkSPHnyBFZWVnBwcIC2trbU9zdu3FBJckRERERECmELgMKUqgB0795dxWkQEREREdHnoFQFYPbs2arOg4iIiIhIaeI8tgAoSqkxAEREREREVDop1QKgoaFR6Nz/eayBEREREdHnxGlAFaZUBeDAgQNSn3NycnDz5k1s3rwZc+bMUUliRERERESkekpVALp161agrFevXqhZsyZ27dqFb7/99pMTIyIiIiJSGGcBUphSFQB5PDw88N1336lyk0REREREHyVmBUBhKhsEnJmZiRUrVqBixYqq2iQREREREamYUi0ApqamUoOAxWIxUlNToa+vDz8/P5UlR0RERESkCDEHAStMqQrA8uXLpT5raGjAwsIC7u7uMDU1VUVeRERERESkBkpVAAYNGqTqPIiIiIiIlCbOYwuAopQeBJyUlIT169fj/v37AICaNWti6NChMDY2VllyRERERESkWkoNAr527RqcnJywbNkyJCYmIjExEUuXLoWTkxNu3Lih6hyJiIiIiAolzhOpbSlrlGoBmDhxIrp27Yq//voLWlr5m8jNzcWwYcMwYcIEnD17VqVJEhERERGRaihVAbh27ZrUzT8AaGlpYcqUKWjQoIHKkiMiIiIiUgRnAVKcUhUAIyMjREREoHr16lLlz58/h6GhoUoSIyIiIiJSVFnsqqMuSo0B6NOnD7799lvs2rULz58/x/Pnz7Fz504MGzYM/fr1U3WORERERESkIkq1ACxevBgCgQA+Pj7Izc0FAGhra2PUqFH49ddfVZogEREREdHHsAVAcUpVAHR0dPD7779jwYIFePLkCQDAyckJ+vr6Kk2OiIiIiIhUq0gVgLy8PAQHB6NKlSrQ09ODvr4+ateuDQDIzMzEnTt3UKtWLWhoKNWziIiIiIhIKaK8vOJOodQo0p361q1bMXToUOjo6BT4TltbG0OHDsX27dtVlhwREREREalWkSoA69evx+TJk6GpqVngu7fTgP75558qS46IiIiISBFikUhtS1lTpArAgwcP4OHhIff7hg0b4v79+5+cFBERERERqUeRxgCkp6cjJSVF7vepqanIyMj45KSIiIiIiIqCswAprkgtAFWqVMHFixflfn/+/HlUqVLlk5MiIiIiIioKcZ5IbUtZU6QKQP/+/TFjxgzcuXOnwHe3b9/GrFmz0L9/f5UlR0REREREqlWkLkATJ07E0aNHUb9+fXh6eqJ69eoAgNDQUJw4cQJNmzbFxIkT1ZJocdpxMgibjl1EfHIaqtlaYVq/TqjtWElu/LFrwVh18CSi4pNgZ2WGiT3boUWdqpLvxWIxVh86hX3nriM14zXqOtthpvdXsLcq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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "execution_count": 31
    },
    {
      "cell_type": "code",
      "source": [
        "corr = df[num_cols].corr()"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:24:16.165331Z",
          "start_time": "2025-02-21T20:24:16.091473Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:24.937043Z",
          "iopub.execute_input": "2025-02-23T07:36:24.937413Z",
          "iopub.status.idle": "2025-02-23T07:36:24.943768Z",
          "shell.execute_reply.started": "2025-02-23T07:36:24.937385Z",
          "shell.execute_reply": "2025-02-23T07:36:24.942869Z"
        },
        "id": "5e09e77422f4704c"
      },
      "outputs": [],
      "execution_count": 32
    },
    {
      "cell_type": "code",
      "source": [
        "corr"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:24:19.834486Z",
          "start_time": "2025-02-21T20:24:19.815556Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:24.944774Z",
          "iopub.execute_input": "2025-02-23T07:36:24.945025Z",
          "iopub.status.idle": "2025-02-23T07:36:24.9618Z",
          "shell.execute_reply.started": "2025-02-23T07:36:24.945003Z",
          "shell.execute_reply": "2025-02-23T07:36:24.960907Z"
        },
        "id": "c482701f278ae2c4",
        "outputId": "e4117537-f116-49cd-bad1-eb6c2af50b4b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Year  Engine_Size  Mileage  Price\n",
              "Year         1.000       -0.001   -0.002  0.663\n",
              "Engine_Size -0.001        1.000    0.015  0.357\n",
              "Mileage     -0.002        0.015    1.000 -0.551\n",
              "Price        0.663        0.357   -0.551  1.000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fa3987e0-1e08-4c91-9f47-7697a8d2d61e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Engine_Size</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>1.000</td>\n",
              "      <td>-0.001</td>\n",
              "      <td>-0.002</td>\n",
              "      <td>0.663</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Engine_Size</th>\n",
              "      <td>-0.001</td>\n",
              "      <td>1.000</td>\n",
              "      <td>0.015</td>\n",
              "      <td>0.357</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mileage</th>\n",
              "      <td>-0.002</td>\n",
              "      <td>0.015</td>\n",
              "      <td>1.000</td>\n",
              "      <td>-0.551</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>0.663</td>\n",
              "      <td>0.357</td>\n",
              "      <td>-0.551</td>\n",
              "      <td>1.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fa3987e0-1e08-4c91-9f47-7697a8d2d61e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fa3987e0-1e08-4c91-9f47-7697a8d2d61e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fa3987e0-1e08-4c91-9f47-7697a8d2d61e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b9441167-aa68-436c-b691-ef4fcb52f051\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b9441167-aa68-436c-b691-ef4fcb52f051')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b9441167-aa68-436c-b691-ef4fcb52f051 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_3938f80b-359a-4826-9cac-8f911159df9e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('corr')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3938f80b-359a-4826-9cac-8f911159df9e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('corr');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "corr",
              "summary": "{\n  \"name\": \"corr\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5004476883978085,\n        \"min\": -0.002475925976294347,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.0013062450874017945,\n          0.6630358185023493,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine_Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.46829425825467824,\n        \"min\": -0.0013062450874017945,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          0.357403475355867,\n          -0.0013062450874017945\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6457183984816044,\n        \"min\": -0.5512271827629027,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.015135037267370081,\n          -0.5512271827629027,\n          -0.002475925976294347\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.666222958421321,\n        \"min\": -0.5512271827629027,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.357403475355867,\n          1.0,\n          0.6630358185023493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "execution_count": 33
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **11. Distribution of the Dependent Variable**"
      ],
      "metadata": {
        "id": "fce4fec214b03d39"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Price\"].hist(bins=100)\n",
        "plt.show(block=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:24:50.926441Z",
          "start_time": "2025-02-21T20:24:50.355528Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:24.962799Z",
          "iopub.execute_input": "2025-02-23T07:36:24.963044Z",
          "iopub.status.idle": "2025-02-23T07:36:25.247747Z",
          "shell.execute_reply.started": "2025-02-23T07:36:24.963022Z",
          "shell.execute_reply": "2025-02-23T07:36:25.246856Z"
        },
        "id": "6565f8319a334280",
        "outputId": "a24bd63b-a7e4-419f-89f3-decad24dea45",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 34
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **12. Examining the Logarithm of the Dependent Variable**"
      ],
      "metadata": {
        "id": "a3b81bc36c10166c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.log1p(df['Price']).hist(bins=50)\n",
        "plt.show(block=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:25:42.033222Z",
          "start_time": "2025-02-21T20:25:41.83856Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.248645Z",
          "iopub.execute_input": "2025-02-23T07:36:25.248944Z",
          "iopub.status.idle": "2025-02-23T07:36:25.448408Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.24892Z",
          "shell.execute_reply": "2025-02-23T07:36:25.447481Z"
        },
        "id": "7174084098a1c659",
        "outputId": "bb20e82c-305a-473f-b71d-04e98983bc00",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 35
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **13. Outliers Analysis**"
      ],
      "metadata": {
        "id": "2e2e127419eb0b99"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.78):\n",
        "    quartile1 = dataframe[col_name].quantile(q1)\n",
        "    quartile3 = dataframe[col_name].quantile(q3)\n",
        "    interquantile_range = quartile3 - quartile1\n",
        "    up_limit = quartile3 + 1.5 * interquantile_range\n",
        "    low_limit = quartile1 - 1.5 * interquantile_range\n",
        "    return low_limit, up_limit"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:27:57.660933Z",
          "start_time": "2025-02-21T20:27:57.629155Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.449345Z",
          "iopub.execute_input": "2025-02-23T07:36:25.44969Z",
          "iopub.status.idle": "2025-02-23T07:36:25.454296Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.449663Z",
          "shell.execute_reply": "2025-02-23T07:36:25.453339Z"
        },
        "id": "35b35c4f3f067165"
      },
      "outputs": [],
      "execution_count": 36
    },
    {
      "cell_type": "code",
      "source": [
        "def check_outlier(dataframe, col_name):\n",
        "    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n",
        "    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n",
        "        return True\n",
        "    else:\n",
        "        return False"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:28:02.662531Z",
          "start_time": "2025-02-21T20:28:02.656522Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.460137Z",
          "iopub.execute_input": "2025-02-23T07:36:25.460418Z",
          "iopub.status.idle": "2025-02-23T07:36:25.468684Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.460394Z",
          "shell.execute_reply": "2025-02-23T07:36:25.467835Z"
        },
        "id": "c00acb2c85ad1b40"
      },
      "outputs": [],
      "execution_count": 37
    },
    {
      "cell_type": "code",
      "source": [
        "for col in num_cols:\n",
        "    print(col, check_outlier(df, col))"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:28:04.880177Z",
          "start_time": "2025-02-21T20:28:04.694745Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.471031Z",
          "iopub.execute_input": "2025-02-23T07:36:25.471327Z",
          "iopub.status.idle": "2025-02-23T07:36:25.497041Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.471301Z",
          "shell.execute_reply": "2025-02-23T07:36:25.496263Z"
        },
        "id": "d23895a293ee8ce8",
        "outputId": "24ac0ce8-ed90-4cbf-e2bd-f26898699668",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Year False\n",
            "Engine_Size False\n",
            "Mileage False\n",
            "Price False\n"
          ]
        }
      ],
      "execution_count": 38
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **14. Missing Value Analysis**"
      ],
      "metadata": {
        "id": "23ecc739d6638d83"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def missing_values_table(dataframe, na_name=False):\n",
        "    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n",
        "\n",
        "    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n",
        "\n",
        "    ratio = (dataframe[na_columns].isnull().sum() / dataframe.shape[0] * 100).sort_values(ascending=False)\n",
        "\n",
        "    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n",
        "\n",
        "    print(missing_df, end=\"\\n\")\n",
        "\n",
        "    if na_name:\n",
        "        return na_columns"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:29:43.018952Z",
          "start_time": "2025-02-21T20:29:42.971447Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.497974Z",
          "iopub.execute_input": "2025-02-23T07:36:25.498248Z",
          "iopub.status.idle": "2025-02-23T07:36:25.50395Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.498224Z",
          "shell.execute_reply": "2025-02-23T07:36:25.50303Z"
        },
        "id": "ce22aa0eea904c03"
      },
      "outputs": [],
      "execution_count": 39
    },
    {
      "cell_type": "code",
      "source": [
        "missing_values_table(df)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:29:44.844345Z",
          "start_time": "2025-02-21T20:29:44.773126Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.504779Z",
          "iopub.execute_input": "2025-02-23T07:36:25.505031Z",
          "iopub.status.idle": "2025-02-23T07:36:25.527338Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.505008Z",
          "shell.execute_reply": "2025-02-23T07:36:25.526339Z"
        },
        "id": "9cd0e2573ee7cce8",
        "outputId": "e5728c0f-4098-433c-95b5-8145555b71cb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Empty DataFrame\n",
            "Columns: [n_miss, ratio]\n",
            "Index: []\n"
          ]
        }
      ],
      "execution_count": 40
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **15. Rare Analysis**"
      ],
      "metadata": {
        "id": "7b2c81e1405246d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def rare_analyser(dataframe, target, cat_cols):\n",
        "    for col in cat_cols:\n",
        "        print(col, ':', len(dataframe[col].value_counts()))\n",
        "        print(pd.DataFrame({'COUNT': dataframe[col].value_counts(),\n",
        "                            'RATIO': dataframe[col].value_counts() / len(dataframe),\n",
        "                            'TARGET_MEAN': dataframe.groupby(col)[target].mean()}), end='\\n\\n\\n')"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:29:53.541939Z",
          "start_time": "2025-02-21T20:29:53.527507Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.528407Z",
          "iopub.execute_input": "2025-02-23T07:36:25.528758Z",
          "iopub.status.idle": "2025-02-23T07:36:25.53921Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.528725Z",
          "shell.execute_reply": "2025-02-23T07:36:25.538183Z"
        },
        "id": "b568d13f05f2092b"
      },
      "outputs": [],
      "execution_count": 41
    },
    {
      "cell_type": "code",
      "source": [
        "rare_analyser(df, \"Price\", cat_cols)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:29:55.142529Z",
          "start_time": "2025-02-21T20:29:55.048797Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.540282Z",
          "iopub.execute_input": "2025-02-23T07:36:25.540605Z",
          "iopub.status.idle": "2025-02-23T07:36:25.596082Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.540574Z",
          "shell.execute_reply": "2025-02-23T07:36:25.595112Z"
        },
        "id": "ebf04210cb75e47c",
        "outputId": "4cd5df9d-0584-4423-aa2f-c8973efae960",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Brand : 10\n",
            "            COUNT  RATIO  TARGET_MEAN\n",
            "Brand                                \n",
            "Audi         1038  0.104     8929.374\n",
            "BMW           999  0.100     8704.068\n",
            "Chevrolet    1003  0.100     9015.684\n",
            "Ford         1048  0.105     8852.571\n",
            "Honda        1009  0.101     8665.597\n",
            "Hyundai       995  0.100     8778.279\n",
            "Kia           976  0.098     8880.086\n",
            "Mercedes      942  0.094     8980.087\n",
            "Toyota        970  0.097     8798.185\n",
            "Volkswagen   1020  0.102     8928.377\n",
            "\n",
            "\n",
            "Model : 30\n",
            "          COUNT  RATIO  TARGET_MEAN\n",
            "Model                              \n",
            "3 Series    335  0.034     8854.752\n",
            "5 Series    353  0.035     8669.218\n",
            "A3          338  0.034     8912.317\n",
            "A4          350  0.035     8919.963\n",
            "Accord      365  0.036     8743.762\n",
            "...         ...    ...          ...\n",
            "Sonata      319  0.032     8740.831\n",
            "Sportage    313  0.031     8867.636\n",
            "Tiguan      352  0.035     9098.864\n",
            "Tucson      329  0.033     8789.070\n",
            "X5          311  0.031     8581.312\n",
            "\n",
            "[30 rows x 3 columns]\n",
            "\n",
            "\n",
            "Fuel_Type : 4\n",
            "           COUNT  RATIO  TARGET_MEAN\n",
            "Fuel_Type                           \n",
            "Diesel      2512  0.251     8117.336\n",
            "Electric    2625  0.263    10032.220\n",
            "Hybrid      2453  0.245     9113.030\n",
            "Petrol      2410  0.241     8070.562\n",
            "\n",
            "\n",
            "Transmission : 3\n",
            "                COUNT  RATIO  TARGET_MEAN\n",
            "Transmission                             \n",
            "Automatic        3317  0.332     9938.253\n",
            "Manual           3372  0.337     8363.426\n",
            "Semi-Automatic   3311  0.331     8264.266\n",
            "\n",
            "\n",
            "Doors : 4\n",
            "       COUNT  RATIO  TARGET_MEAN\n",
            "Doors                           \n",
            "2       2455  0.245     8928.931\n",
            "3       2575  0.258     8746.447\n",
            "4       2514  0.251     8841.588\n",
            "5       2456  0.246     8900.353\n",
            "\n",
            "\n",
            "Owner_Count : 5\n",
            "             COUNT  RATIO  TARGET_MEAN\n",
            "Owner_Count                           \n",
            "1             2036  0.204     8841.374\n",
            "2             2020  0.202     8847.258\n",
            "3             1977  0.198     8847.919\n",
            "4             1931  0.193     8869.173\n",
            "5             2036  0.204     8859.742\n",
            "\n",
            "\n"
          ]
        }
      ],
      "execution_count": 42
    },
    {
      "cell_type": "code",
      "source": [
        "def rare_encoder(dataframe, rare_perc):\n",
        "    temp_df = dataframe.copy()\n",
        "\n",
        "    rare_columns = [col for col in temp_df.columns if temp_df[col].dtypes == 'O'\n",
        "                    and (temp_df[col].value_counts() / len(temp_df) < rare_perc).any(axis=None)]\n",
        "\n",
        "    for var in rare_columns:\n",
        "        tmp = temp_df[var].value_counts() / len(temp_df)\n",
        "        rare_labels = tmp[tmp < rare_perc].index\n",
        "        temp_df[var] = np.where(temp_df[var].isin(rare_labels), 'Rare', temp_df[var])\n",
        "    return temp_df"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:34:17.816037Z",
          "start_time": "2025-02-21T20:34:17.775137Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.597052Z",
          "iopub.execute_input": "2025-02-23T07:36:25.597379Z",
          "iopub.status.idle": "2025-02-23T07:36:25.602895Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.597353Z",
          "shell.execute_reply": "2025-02-23T07:36:25.601839Z"
        },
        "id": "a09f2e2bb35361b4"
      },
      "outputs": [],
      "execution_count": 43
    },
    {
      "cell_type": "code",
      "source": [
        "rare_encoder(df, 0.01)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:34:19.751755Z",
          "start_time": "2025-02-21T20:34:19.646925Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.60372Z",
          "iopub.execute_input": "2025-02-23T07:36:25.604006Z",
          "iopub.status.idle": "2025-02-23T07:36:25.63104Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.603969Z",
          "shell.execute_reply": "2025-02-23T07:36:25.630003Z"
        },
        "id": "b0c49271a5f49f3e",
        "outputId": "3a35903f-7f40-43dd-f551-70bd574e5c16",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Brand     Model  Year  Engine_Size Fuel_Type    Transmission  \\\n",
              "0            Kia       Rio  2020        4.200    Diesel          Manual   \n",
              "1      Chevrolet    Malibu  2012        2.000    Hybrid       Automatic   \n",
              "2       Mercedes       GLA  2020        4.200    Diesel       Automatic   \n",
              "3           Audi        Q5  2023        2.000  Electric          Manual   \n",
              "4     Volkswagen      Golf  2003        2.600    Hybrid  Semi-Automatic   \n",
              "...          ...       ...   ...          ...       ...             ...   \n",
              "9995         Kia    Optima  2004        3.700    Diesel  Semi-Automatic   \n",
              "9996   Chevrolet    Impala  2002        1.400  Electric       Automatic   \n",
              "9997         BMW  3 Series  2010        3.000    Petrol       Automatic   \n",
              "9998        Ford  Explorer  2002        1.400    Hybrid       Automatic   \n",
              "9999  Volkswagen    Tiguan  2001        2.100    Diesel          Manual   \n",
              "\n",
              "      Mileage  Doors  Owner_Count  Price  \n",
              "0      289944      3            5   8501  \n",
              "1        5356      2            3  12092  \n",
              "2      231440      4            2  11171  \n",
              "3      160971      2            1  11780  \n",
              "4      286618      3            3   2867  \n",
              "...       ...    ...          ...    ...  \n",
              "9995     5794      2            4   8884  \n",
              "9996   168000      2            1   6240  \n",
              "9997    86664      5            1   9866  \n",
              "9998   225772      4            1   4084  \n",
              "9999   157882      3            3   3342  \n",
              "\n",
              "[10000 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-487ca896-89c2-4e0d-a9a4-7204a19124f5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Year</th>\n",
              "      <th>Engine_Size</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Owner_Count</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Kia</td>\n",
              "      <td>Rio</td>\n",
              "      <td>2020</td>\n",
              "      <td>4.200</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>289944</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>8501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Chevrolet</td>\n",
              "      <td>Malibu</td>\n",
              "      <td>2012</td>\n",
              "      <td>2.000</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>5356</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>12092</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Mercedes</td>\n",
              "      <td>GLA</td>\n",
              "      <td>2020</td>\n",
              "      <td>4.200</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>231440</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>11171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Audi</td>\n",
              "      <td>Q5</td>\n",
              "      <td>2023</td>\n",
              "      <td>2.000</td>\n",
              "      <td>Electric</td>\n",
              "      <td>Manual</td>\n",
              "      <td>160971</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>11780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>Golf</td>\n",
              "      <td>2003</td>\n",
              "      <td>2.600</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>Semi-Automatic</td>\n",
              "      <td>286618</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>Kia</td>\n",
              "      <td>Optima</td>\n",
              "      <td>2004</td>\n",
              "      <td>3.700</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Semi-Automatic</td>\n",
              "      <td>5794</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>8884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>Chevrolet</td>\n",
              "      <td>Impala</td>\n",
              "      <td>2002</td>\n",
              "      <td>1.400</td>\n",
              "      <td>Electric</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>168000</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>6240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>BMW</td>\n",
              "      <td>3 Series</td>\n",
              "      <td>2010</td>\n",
              "      <td>3.000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>86664</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>9866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>Ford</td>\n",
              "      <td>Explorer</td>\n",
              "      <td>2002</td>\n",
              "      <td>1.400</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>225772</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>4084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>Tiguan</td>\n",
              "      <td>2001</td>\n",
              "      <td>2.100</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>157882</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3342</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-487ca896-89c2-4e0d-a9a4-7204a19124f5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-487ca896-89c2-4e0d-a9a4-7204a19124f5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-487ca896-89c2-4e0d-a9a4-7204a19124f5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a34df93e-9084-4970-a7f5-e2556a000af9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a34df93e-9084-4970-a7f5-e2556a000af9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a34df93e-9084-4970-a7f5-e2556a000af9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"rare_encoder(df, 0\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Hyundai\",\n          \"Chevrolet\",\n          \"Toyota\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"C-Class\",\n          \"A3\",\n          \"A4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 2000,\n        \"max\": 2023,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          2005,\n          2018,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine_Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.149324053945646,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          1.0,\n          2.9,\n          4.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Hybrid\",\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Manual\",\n          \"Automatic\",\n          \"Semi-Automatic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86322,\n        \"min\": 25,\n        \"max\": 299947,\n        \"num_unique_values\": 9854,\n        \"samples\": [\n          144244,\n          105615,\n          8332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Doors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3112,\n        \"min\": 2000,\n        \"max\": 18301,\n        \"num_unique_values\": 6661,\n        \"samples\": [\n          10460,\n          8448,\n          12616\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ],
      "execution_count": 44
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **16. Feature Extraction**"
      ],
      "metadata": {
        "id": "58b9f4e5ff52ce58"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Engine_Size\"].value_counts()"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T18:04:52.433337Z",
          "start_time": "2025-02-21T18:04:52.411654Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.632018Z",
          "iopub.execute_input": "2025-02-23T07:36:25.632304Z",
          "iopub.status.idle": "2025-02-23T07:36:25.648186Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.63228Z",
          "shell.execute_reply": "2025-02-23T07:36:25.647308Z"
        },
        "id": "7b222e35c5890e3d",
        "outputId": "d44254de-6a6d-4a3e-8823-52ebd2248800",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Engine_Size\n",
              "3.700    273\n",
              "4.400    271\n",
              "3.600    267\n",
              "2.500    266\n",
              "1.500    265\n",
              "        ... \n",
              "4.800    231\n",
              "1.100    230\n",
              "2.300    223\n",
              "1.000    113\n",
              "5.000    103\n",
              "Name: count, Length: 41, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Engine_Size</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3.700</th>\n",
              "      <td>273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4.400</th>\n",
              "      <td>271</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.600</th>\n",
              "      <td>267</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.500</th>\n",
              "      <td>266</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.500</th>\n",
              "      <td>265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4.800</th>\n",
              "      <td>231</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.100</th>\n",
              "      <td>230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.300</th>\n",
              "      <td>223</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.000</th>\n",
              "      <td>113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5.000</th>\n",
              "      <td>103</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>41 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "execution_count": 45
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Engine_Size_Group\"] = pd.cut(df[\"Engine_Size\"], bins=3, labels=[\"Small\", \"Medium\", \"Large\"])\n",
        "df[\"Mileage_Group\"] = pd.cut(df[\"Mileage\"], bins=3, labels=[\"Low\", \"Medium\", \"High\"])\n",
        "df[\"Year_of_Registration_Group\"] = pd.cut(df[\"Year\"], bins=3, labels=[\"2000s\", \"2010s\", \"2020s\"])"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:44:08.853167Z",
          "start_time": "2025-02-21T20:44:08.767108Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.649235Z",
          "iopub.execute_input": "2025-02-23T07:36:25.649604Z",
          "iopub.status.idle": "2025-02-23T07:36:25.666171Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.649567Z",
          "shell.execute_reply": "2025-02-23T07:36:25.665305Z"
        },
        "id": "fe8bb9b045ff7810"
      },
      "outputs": [],
      "execution_count": 46
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:44:10.757814Z",
          "start_time": "2025-02-21T20:44:10.716293Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.667134Z",
          "iopub.execute_input": "2025-02-23T07:36:25.667461Z",
          "iopub.status.idle": "2025-02-23T07:36:25.682435Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.667427Z",
          "shell.execute_reply": "2025-02-23T07:36:25.681474Z"
        },
        "id": "1630096966369d94",
        "outputId": "d04ebff0-bc35-4ce7-ad5d-abe8a2b03112",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Brand   Model  Year  Engine_Size Fuel_Type    Transmission  Mileage  \\\n",
              "0         Kia     Rio  2020        4.200    Diesel          Manual   289944   \n",
              "1   Chevrolet  Malibu  2012        2.000    Hybrid       Automatic     5356   \n",
              "2    Mercedes     GLA  2020        4.200    Diesel       Automatic   231440   \n",
              "3        Audi      Q5  2023        2.000  Electric          Manual   160971   \n",
              "4  Volkswagen    Golf  2003        2.600    Hybrid  Semi-Automatic   286618   \n",
              "\n",
              "   Doors  Owner_Count  Price Engine_Size_Group Mileage_Group  \\\n",
              "0      3            5   8501             Large          High   \n",
              "1      2            3  12092             Small           Low   \n",
              "2      4            2  11171             Large          High   \n",
              "3      2            1  11780             Small        Medium   \n",
              "4      3            3   2867            Medium          High   \n",
              "\n",
              "  Year_of_Registration_Group  \n",
              "0                      2020s  \n",
              "1                      2010s  \n",
              "2                      2020s  \n",
              "3                      2020s  \n",
              "4                      2000s  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae13c159-564d-4bb1-93e3-7ac5614d92de\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Year</th>\n",
              "      <th>Engine_Size</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Owner_Count</th>\n",
              "      <th>Price</th>\n",
              "      <th>Engine_Size_Group</th>\n",
              "      <th>Mileage_Group</th>\n",
              "      <th>Year_of_Registration_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Kia</td>\n",
              "      <td>Rio</td>\n",
              "      <td>2020</td>\n",
              "      <td>4.200</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>289944</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>8501</td>\n",
              "      <td>Large</td>\n",
              "      <td>High</td>\n",
              "      <td>2020s</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Chevrolet</td>\n",
              "      <td>Malibu</td>\n",
              "      <td>2012</td>\n",
              "      <td>2.000</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>5356</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>12092</td>\n",
              "      <td>Small</td>\n",
              "      <td>Low</td>\n",
              "      <td>2010s</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Mercedes</td>\n",
              "      <td>GLA</td>\n",
              "      <td>2020</td>\n",
              "      <td>4.200</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>231440</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>11171</td>\n",
              "      <td>Large</td>\n",
              "      <td>High</td>\n",
              "      <td>2020s</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Audi</td>\n",
              "      <td>Q5</td>\n",
              "      <td>2023</td>\n",
              "      <td>2.000</td>\n",
              "      <td>Electric</td>\n",
              "      <td>Manual</td>\n",
              "      <td>160971</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>11780</td>\n",
              "      <td>Small</td>\n",
              "      <td>Medium</td>\n",
              "      <td>2020s</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>Golf</td>\n",
              "      <td>2003</td>\n",
              "      <td>2.600</td>\n",
              "      <td>Hybrid</td>\n",
              "      <td>Semi-Automatic</td>\n",
              "      <td>286618</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2867</td>\n",
              "      <td>Medium</td>\n",
              "      <td>High</td>\n",
              "      <td>2000s</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae13c159-564d-4bb1-93e3-7ac5614d92de')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ae13c159-564d-4bb1-93e3-7ac5614d92de button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ae13c159-564d-4bb1-93e3-7ac5614d92de');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0dadff19-5948-4c67-8929-4c7d08bff5dc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0dadff19-5948-4c67-8929-4c7d08bff5dc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0dadff19-5948-4c67-8929-4c7d08bff5dc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Hyundai\",\n          \"Chevrolet\",\n          \"Toyota\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"C-Class\",\n          \"A3\",\n          \"A4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 2000,\n        \"max\": 2023,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          2005,\n          2018,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine_Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.149324053945646,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          1.0,\n          2.9,\n          4.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Hybrid\",\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Manual\",\n          \"Automatic\",\n          \"Semi-Automatic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86322,\n        \"min\": 25,\n        \"max\": 299947,\n        \"num_unique_values\": 9854,\n        \"samples\": [\n          144244,\n          105615,\n          8332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Doors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3112,\n        \"min\": 2000,\n        \"max\": 18301,\n        \"num_unique_values\": 6661,\n        \"samples\": [\n          10460,\n          8448,\n          12616\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine_Size_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Large\",\n          \"Small\",\n          \"Medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"High\",\n          \"Low\",\n          \"Medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year_of_Registration_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2020s\",\n          \"2010s\",\n          \"2000s\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "execution_count": 47
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **17. Encoding**"
      ],
      "metadata": {
        "id": "63eb8094d84f86e8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:46:01.219878Z",
          "start_time": "2025-02-21T20:46:01.071069Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.683425Z",
          "iopub.execute_input": "2025-02-23T07:36:25.6838Z",
          "iopub.status.idle": "2025-02-23T07:36:25.70715Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.683763Z",
          "shell.execute_reply": "2025-02-23T07:36:25.706189Z"
        },
        "id": "97f04ec686219317",
        "outputId": "aa6feb5b-f0e5-4065-be82-0bc5afd680f7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10000 entries, 0 to 9999\n",
            "Data columns (total 13 columns):\n",
            " #   Column                      Non-Null Count  Dtype   \n",
            "---  ------                      --------------  -----   \n",
            " 0   Brand                       10000 non-null  object  \n",
            " 1   Model                       10000 non-null  object  \n",
            " 2   Year                        10000 non-null  int64   \n",
            " 3   Engine_Size                 10000 non-null  float64 \n",
            " 4   Fuel_Type                   10000 non-null  object  \n",
            " 5   Transmission                10000 non-null  object  \n",
            " 6   Mileage                     10000 non-null  int64   \n",
            " 7   Doors                       10000 non-null  int64   \n",
            " 8   Owner_Count                 10000 non-null  int64   \n",
            " 9   Price                       10000 non-null  int64   \n",
            " 10  Engine_Size_Group           10000 non-null  category\n",
            " 11  Mileage_Group               10000 non-null  category\n",
            " 12  Year_of_Registration_Group  10000 non-null  category\n",
            "dtypes: category(3), float64(1), int64(5), object(4)\n",
            "memory usage: 811.1+ KB\n"
          ]
        }
      ],
      "execution_count": 48
    },
    {
      "cell_type": "code",
      "source": [
        "cat_cols, num_cols, cat_but_car,  num_but_cat = grab_col_names(df)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:46:12.960184Z",
          "start_time": "2025-02-21T20:46:12.9162Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.708073Z",
          "iopub.execute_input": "2025-02-23T07:36:25.708375Z",
          "iopub.status.idle": "2025-02-23T07:36:25.72392Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.708349Z",
          "shell.execute_reply": "2025-02-23T07:36:25.72301Z"
        },
        "id": "47082277574edc89",
        "outputId": "61c10be0-d89f-457c-b6c7-a2532cf2b049",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Observations: 10000\n",
            "Variables: 13\n",
            "cat_cols: 9\n",
            "num_cols: 4\n",
            "cat_but_car: 0\n",
            "num_but_cat: 5\n"
          ]
        }
      ],
      "execution_count": 49
    },
    {
      "cell_type": "code",
      "source": [
        "cat_cols"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:46:15.607107Z",
          "start_time": "2025-02-21T20:46:15.596425Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.724914Z",
          "iopub.execute_input": "2025-02-23T07:36:25.725217Z",
          "iopub.status.idle": "2025-02-23T07:36:25.730734Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.725192Z",
          "shell.execute_reply": "2025-02-23T07:36:25.729894Z"
        },
        "id": "7f1711c8cbec4521",
        "outputId": "e530636f-f7f8-4a8b-8e97-9943f59fe8e7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Brand',\n",
              " 'Model',\n",
              " 'Fuel_Type',\n",
              " 'Transmission',\n",
              " 'Doors',\n",
              " 'Owner_Count',\n",
              " 'Engine_Size_Group',\n",
              " 'Mileage_Group',\n",
              " 'Year_of_Registration_Group']"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "execution_count": 50
    },
    {
      "cell_type": "code",
      "source": [
        "num_cols"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:46:18.179078Z",
          "start_time": "2025-02-21T20:46:18.17079Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.731683Z",
          "iopub.execute_input": "2025-02-23T07:36:25.732014Z",
          "iopub.status.idle": "2025-02-23T07:36:25.745955Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.731989Z",
          "shell.execute_reply": "2025-02-23T07:36:25.744965Z"
        },
        "id": "7c0c799f52533600",
        "outputId": "b9216f76-4ea6-4865-8a8d-8b50e65e4def",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Year', 'Engine_Size', 'Mileage', 'Price']"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ],
      "execution_count": 51
    },
    {
      "cell_type": "code",
      "source": [
        "cat_but_car"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:46:20.630191Z",
          "start_time": "2025-02-21T20:46:20.620881Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.746956Z",
          "iopub.execute_input": "2025-02-23T07:36:25.747271Z",
          "iopub.status.idle": "2025-02-23T07:36:25.760458Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.747246Z",
          "shell.execute_reply": "2025-02-23T07:36:25.759557Z"
        },
        "id": "e2a8cacb741a59b5",
        "outputId": "e28d9490-aa16-42ec-dc89-433f77674b9b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ],
      "execution_count": 52
    },
    {
      "cell_type": "code",
      "source": [
        "num_but_cat"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:46:22.274672Z",
          "start_time": "2025-02-21T20:46:22.263701Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.761325Z",
          "iopub.execute_input": "2025-02-23T07:36:25.761616Z",
          "iopub.status.idle": "2025-02-23T07:36:25.776345Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.761591Z",
          "shell.execute_reply": "2025-02-23T07:36:25.775316Z"
        },
        "id": "59cfe8c94983c5e7",
        "outputId": "6ec2068c-de8a-4fa8-9fe1-4f7a1a510778",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Doors',\n",
              " 'Owner_Count',\n",
              " 'Engine_Size_Group',\n",
              " 'Mileage_Group',\n",
              " 'Year_of_Registration_Group']"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "execution_count": 53
    },
    {
      "cell_type": "code",
      "source": [
        "def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n",
        "    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n",
        "    return dataframe"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:46:37.141806Z",
          "start_time": "2025-02-21T20:46:37.128402Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.77739Z",
          "iopub.execute_input": "2025-02-23T07:36:25.777736Z",
          "iopub.status.idle": "2025-02-23T07:36:25.789566Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.777709Z",
          "shell.execute_reply": "2025-02-23T07:36:25.78852Z"
        },
        "id": "4cc432e0531a78c0"
      },
      "outputs": [],
      "execution_count": 54
    },
    {
      "cell_type": "code",
      "source": [
        "df = one_hot_encoder(df, cat_cols, drop_first=True)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:46:38.621143Z",
          "start_time": "2025-02-21T20:46:38.55378Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.790427Z",
          "iopub.execute_input": "2025-02-23T07:36:25.790689Z",
          "iopub.status.idle": "2025-02-23T07:36:25.822148Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.790667Z",
          "shell.execute_reply": "2025-02-23T07:36:25.821308Z"
        },
        "id": "ed51402ff001ddc4"
      },
      "outputs": [],
      "execution_count": 55
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:46:40.004872Z",
          "start_time": "2025-02-21T20:46:39.961261Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.823114Z",
          "iopub.execute_input": "2025-02-23T07:36:25.823463Z",
          "iopub.status.idle": "2025-02-23T07:36:25.858807Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.823428Z",
          "shell.execute_reply": "2025-02-23T07:36:25.857898Z"
        },
        "id": "8765c24598ada953",
        "outputId": "813bfb4c-9eae-4720-8a06-a047582fd4b1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Year  Engine_Size  Mileage  Price  Brand_BMW  Brand_Chevrolet  Brand_Ford  \\\n",
              "0  2020        4.200   289944   8501      False            False       False   \n",
              "1  2012        2.000     5356  12092      False             True       False   \n",
              "2  2020        4.200   231440  11171      False            False       False   \n",
              "3  2023        2.000   160971  11780      False            False       False   \n",
              "4  2003        2.600   286618   2867      False            False       False   \n",
              "\n",
              "   Brand_Honda  Brand_Hyundai  Brand_Kia  Brand_Mercedes  Brand_Toyota  \\\n",
              "0        False          False       True           False         False   \n",
              "1        False          False      False           False         False   \n",
              "2        False          False      False            True         False   \n",
              "3        False          False      False           False         False   \n",
              "4        False          False      False           False         False   \n",
              "\n",
              "   Brand_Volkswagen  Model_5 Series  Model_A3  Model_A4  Model_Accord  \\\n",
              "0             False           False     False     False         False   \n",
              "1             False           False     False     False         False   \n",
              "2             False           False     False     False         False   \n",
              "3             False           False     False     False         False   \n",
              "4              True           False     False     False         False   \n",
              "\n",
              "   Model_C-Class  Model_CR-V  Model_Camry  Model_Civic  Model_Corolla  \\\n",
              "0          False       False        False        False          False   \n",
              "1          False       False        False        False          False   \n",
              "2          False       False        False        False          False   \n",
              "3          False       False        False        False          False   \n",
              "4          False       False        False        False          False   \n",
              "\n",
              "   Model_E-Class  Model_Elantra  Model_Equinox  Model_Explorer  Model_Fiesta  \\\n",
              "0          False          False          False           False         False   \n",
              "1          False          False          False           False         False   \n",
              "2          False          False          False           False         False   \n",
              "3          False          False          False           False         False   \n",
              "4          False          False          False           False         False   \n",
              "\n",
              "   Model_Focus  Model_GLA  Model_Golf  Model_Impala  Model_Malibu  \\\n",
              "0        False      False       False         False         False   \n",
              "1        False      False       False         False          True   \n",
              "2        False       True       False         False         False   \n",
              "3        False      False       False         False         False   \n",
              "4        False      False        True         False         False   \n",
              "\n",
              "   Model_Optima  Model_Passat  Model_Q5  Model_RAV4  Model_Rio  Model_Sonata  \\\n",
              "0         False         False     False       False       True         False   \n",
              "1         False         False     False       False      False         False   \n",
              "2         False         False     False       False      False         False   \n",
              "3         False         False      True       False      False         False   \n",
              "4         False         False     False       False      False         False   \n",
              "\n",
              "   Model_Sportage  Model_Tiguan  Model_Tucson  Model_X5  Fuel_Type_Electric  \\\n",
              "0           False         False         False     False               False   \n",
              "1           False         False         False     False               False   \n",
              "2           False         False         False     False               False   \n",
              "3           False         False         False     False                True   \n",
              "4           False         False         False     False               False   \n",
              "\n",
              "   Fuel_Type_Hybrid  Fuel_Type_Petrol  Transmission_Manual  \\\n",
              "0             False             False                 True   \n",
              "1              True             False                False   \n",
              "2             False             False                False   \n",
              "3             False             False                 True   \n",
              "4              True             False                False   \n",
              "\n",
              "   Transmission_Semi-Automatic  Doors_3  Doors_4  Doors_5  Owner_Count_2  \\\n",
              "0                        False     True    False    False          False   \n",
              "1                        False    False    False    False          False   \n",
              "2                        False    False     True    False           True   \n",
              "3                        False    False    False    False          False   \n",
              "4                         True     True    False    False          False   \n",
              "\n",
              "   Owner_Count_3  Owner_Count_4  Owner_Count_5  Engine_Size_Group_Medium  \\\n",
              "0          False          False           True                     False   \n",
              "1           True          False          False                     False   \n",
              "2          False          False          False                     False   \n",
              "3          False          False          False                     False   \n",
              "4           True          False          False                      True   \n",
              "\n",
              "   Engine_Size_Group_Large  Mileage_Group_Medium  Mileage_Group_High  \\\n",
              "0                     True                 False                True   \n",
              "1                    False                 False               False   \n",
              "2                     True                 False                True   \n",
              "3                    False                  True               False   \n",
              "4                    False                 False                True   \n",
              "\n",
              "   Year_of_Registration_Group_2010s  Year_of_Registration_Group_2020s  \n",
              "0                             False                              True  \n",
              "1                              True                             False  \n",
              "2                             False                              True  \n",
              "3                             False                              True  \n",
              "4                             False                             False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-96942fad-4395-40c9-9829-4783c9e6fa67\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Engine_Size</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Price</th>\n",
              "      <th>Brand_BMW</th>\n",
              "      <th>Brand_Chevrolet</th>\n",
              "      <th>Brand_Ford</th>\n",
              "      <th>Brand_Honda</th>\n",
              "      <th>Brand_Hyundai</th>\n",
              "      <th>Brand_Kia</th>\n",
              "      <th>Brand_Mercedes</th>\n",
              "      <th>Brand_Toyota</th>\n",
              "      <th>Brand_Volkswagen</th>\n",
              "      <th>Model_5 Series</th>\n",
              "      <th>Model_A3</th>\n",
              "      <th>Model_A4</th>\n",
              "      <th>Model_Accord</th>\n",
              "      <th>Model_C-Class</th>\n",
              "      <th>Model_CR-V</th>\n",
              "      <th>Model_Camry</th>\n",
              "      <th>Model_Civic</th>\n",
              "      <th>Model_Corolla</th>\n",
              "      <th>Model_E-Class</th>\n",
              "      <th>Model_Elantra</th>\n",
              "      <th>Model_Equinox</th>\n",
              "      <th>Model_Explorer</th>\n",
              "      <th>Model_Fiesta</th>\n",
              "      <th>Model_Focus</th>\n",
              "      <th>Model_GLA</th>\n",
              "      <th>Model_Golf</th>\n",
              "      <th>Model_Impala</th>\n",
              "      <th>Model_Malibu</th>\n",
              "      <th>Model_Optima</th>\n",
              "      <th>Model_Passat</th>\n",
              "      <th>Model_Q5</th>\n",
              "      <th>Model_RAV4</th>\n",
              "      <th>Model_Rio</th>\n",
              "      <th>Model_Sonata</th>\n",
              "      <th>Model_Sportage</th>\n",
              "      <th>Model_Tiguan</th>\n",
              "      <th>Model_Tucson</th>\n",
              "      <th>Model_X5</th>\n",
              "      <th>Fuel_Type_Electric</th>\n",
              "      <th>Fuel_Type_Hybrid</th>\n",
              "      <th>Fuel_Type_Petrol</th>\n",
              "      <th>Transmission_Manual</th>\n",
              "      <th>Transmission_Semi-Automatic</th>\n",
              "      <th>Doors_3</th>\n",
              "      <th>Doors_4</th>\n",
              "      <th>Doors_5</th>\n",
              "      <th>Owner_Count_2</th>\n",
              "      <th>Owner_Count_3</th>\n",
              "      <th>Owner_Count_4</th>\n",
              "      <th>Owner_Count_5</th>\n",
              "      <th>Engine_Size_Group_Medium</th>\n",
              "      <th>Engine_Size_Group_Large</th>\n",
              "      <th>Mileage_Group_Medium</th>\n",
              "      <th>Mileage_Group_High</th>\n",
              "      <th>Year_of_Registration_Group_2010s</th>\n",
              "      <th>Year_of_Registration_Group_2020s</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020</td>\n",
              "      <td>4.200</td>\n",
              "      <td>289944</td>\n",
              "      <td>8501</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2012</td>\n",
              "      <td>2.000</td>\n",
              "      <td>5356</td>\n",
              "      <td>12092</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020</td>\n",
              "      <td>4.200</td>\n",
              "      <td>231440</td>\n",
              "      <td>11171</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2023</td>\n",
              "      <td>2.000</td>\n",
              "      <td>160971</td>\n",
              "      <td>11780</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2003</td>\n",
              "      <td>2.600</td>\n",
              "      <td>286618</td>\n",
              "      <td>2867</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-96942fad-4395-40c9-9829-4783c9e6fa67')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-96942fad-4395-40c9-9829-4783c9e6fa67 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-96942fad-4395-40c9-9829-4783c9e6fa67');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1d03de06-7aa2-44e0-92a7-0f548515d4b8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d03de06-7aa2-44e0-92a7-0f548515d4b8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1d03de06-7aa2-44e0-92a7-0f548515d4b8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ],
      "execution_count": 56
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **18. Standardization Process**"
      ],
      "metadata": {
        "id": "f7f48e3f6b334ad5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_cols = [col for col in num_cols if col not in [\"Price\"]]"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:54:37.211113Z",
          "start_time": "2025-02-21T20:54:37.142694Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.859958Z",
          "iopub.execute_input": "2025-02-23T07:36:25.860271Z",
          "iopub.status.idle": "2025-02-23T07:36:25.871326Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.860245Z",
          "shell.execute_reply": "2025-02-23T07:36:25.870208Z"
        },
        "id": "19144c29587da3c3"
      },
      "outputs": [],
      "execution_count": 57
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = RobustScaler()"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:54:39.210886Z",
          "start_time": "2025-02-21T20:54:39.199772Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.872231Z",
          "iopub.execute_input": "2025-02-23T07:36:25.872491Z",
          "iopub.status.idle": "2025-02-23T07:36:25.887237Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.872469Z",
          "shell.execute_reply": "2025-02-23T07:36:25.886204Z"
        },
        "id": "79eab945dbb6025f"
      },
      "outputs": [],
      "execution_count": 58
    },
    {
      "cell_type": "code",
      "source": [
        "df[num_cols] = scaler.fit_transform(df[num_cols])"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:54:56.727693Z",
          "start_time": "2025-02-21T20:54:56.595335Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.888312Z",
          "iopub.execute_input": "2025-02-23T07:36:25.888679Z",
          "iopub.status.idle": "2025-02-23T07:36:25.90963Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.888633Z",
          "shell.execute_reply": "2025-02-23T07:36:25.90868Z"
        },
        "id": "a79fd97685d09057"
      },
      "outputs": [],
      "execution_count": 59
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:55:01.727079Z",
          "start_time": "2025-02-21T20:55:01.67656Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.910695Z",
          "iopub.execute_input": "2025-02-23T07:36:25.911018Z",
          "iopub.status.idle": "2025-02-23T07:36:25.953445Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.910991Z",
          "shell.execute_reply": "2025-02-23T07:36:25.952459Z"
        },
        "id": "5222af7a9066c241",
        "outputId": "73c3cc40-97a7-4683-d71f-b1be5459f2b2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Year  Engine_Size  Mileage  Price  Brand_BMW  Brand_Chevrolet  Brand_Ford  \\\n",
              "0  0.727        0.600    0.942   8501      False            False       False   \n",
              "1  0.000       -0.500   -0.968  12092      False             True       False   \n",
              "2  0.727        0.600    0.550  11171      False            False       False   \n",
              "3  1.000       -0.500    0.076  11780      False            False       False   \n",
              "4 -0.818       -0.200    0.920   2867      False            False       False   \n",
              "5 -0.455       -0.150    0.056   7242      False            False       False   \n",
              "6 -0.182        0.200   -0.067  11208      False            False       False   \n",
              "7 -1.000        0.850    0.053   7950      False            False       False   \n",
              "8  0.182       -0.200   -0.342   9926      False            False       False   \n",
              "9 -0.636        0.050   -0.281   6545      False            False       False   \n",
              "\n",
              "   Brand_Honda  Brand_Hyundai  Brand_Kia  Brand_Mercedes  Brand_Toyota  \\\n",
              "0        False          False       True           False         False   \n",
              "1        False          False      False           False         False   \n",
              "2        False          False      False            True         False   \n",
              "3        False          False      False           False         False   \n",
              "4        False          False      False           False         False   \n",
              "5        False          False      False           False          True   \n",
              "6         True          False      False           False         False   \n",
              "7        False          False       True           False         False   \n",
              "8        False          False       True           False         False   \n",
              "9        False          False      False           False          True   \n",
              "\n",
              "   Brand_Volkswagen  Model_5 Series  Model_A3  Model_A4  Model_Accord  \\\n",
              "0             False           False     False     False         False   \n",
              "1             False           False     False     False         False   \n",
              "2             False           False     False     False         False   \n",
              "3             False           False     False     False         False   \n",
              "4              True           False     False     False         False   \n",
              "5             False           False     False     False         False   \n",
              "6             False           False     False     False         False   \n",
              "7             False           False     False     False         False   \n",
              "8             False           False     False     False         False   \n",
              "9             False           False     False     False         False   \n",
              "\n",
              "   Model_C-Class  Model_CR-V  Model_Camry  Model_Civic  Model_Corolla  \\\n",
              "0          False       False        False        False          False   \n",
              "1          False       False        False        False          False   \n",
              "2          False       False        False        False          False   \n",
              "3          False       False        False        False          False   \n",
              "4          False       False        False        False          False   \n",
              "5          False       False         True        False          False   \n",
              "6          False       False        False         True          False   \n",
              "7          False       False        False        False          False   \n",
              "8          False       False        False        False          False   \n",
              "9          False       False        False        False          False   \n",
              "\n",
              "   Model_E-Class  Model_Elantra  Model_Equinox  Model_Explorer  Model_Fiesta  \\\n",
              "0          False          False          False           False         False   \n",
              "1          False          False          False           False         False   \n",
              "2          False          False          False           False         False   \n",
              "3          False          False          False           False         False   \n",
              "4          False          False          False           False         False   \n",
              "5          False          False          False           False         False   \n",
              "6          False          False          False           False         False   \n",
              "7          False          False          False           False         False   \n",
              "8          False          False          False           False         False   \n",
              "9          False          False          False           False         False   \n",
              "\n",
              "   Model_Focus  Model_GLA  Model_Golf  Model_Impala  Model_Malibu  \\\n",
              "0        False      False       False         False         False   \n",
              "1        False      False       False         False          True   \n",
              "2        False       True       False         False         False   \n",
              "3        False      False       False         False         False   \n",
              "4        False      False        True         False         False   \n",
              "5        False      False       False         False         False   \n",
              "6        False      False       False         False         False   \n",
              "7        False      False       False         False         False   \n",
              "8        False      False       False         False         False   \n",
              "9        False      False       False         False         False   \n",
              "\n",
              "   Model_Optima  Model_Passat  Model_Q5  Model_RAV4  Model_Rio  Model_Sonata  \\\n",
              "0         False         False     False       False       True         False   \n",
              "1         False         False     False       False      False         False   \n",
              "2         False         False     False       False      False         False   \n",
              "3         False         False      True       False      False         False   \n",
              "4         False         False     False       False      False         False   \n",
              "5         False         False     False       False      False         False   \n",
              "6         False         False     False       False      False         False   \n",
              "7         False         False     False       False      False         False   \n",
              "8         False         False     False       False      False         False   \n",
              "9         False         False     False        True      False         False   \n",
              "\n",
              "   Model_Sportage  Model_Tiguan  Model_Tucson  Model_X5  Fuel_Type_Electric  \\\n",
              "0           False         False         False     False               False   \n",
              "1           False         False         False     False               False   \n",
              "2           False         False         False     False               False   \n",
              "3           False         False         False     False                True   \n",
              "4           False         False         False     False               False   \n",
              "5           False         False         False     False               False   \n",
              "6           False         False         False     False                True   \n",
              "7            True         False         False     False                True   \n",
              "8            True         False         False     False               False   \n",
              "9           False         False         False     False               False   \n",
              "\n",
              "   Fuel_Type_Hybrid  Fuel_Type_Petrol  Transmission_Manual  \\\n",
              "0             False             False                 True   \n",
              "1              True             False                False   \n",
              "2             False             False                False   \n",
              "3             False             False                 True   \n",
              "4              True             False                False   \n",
              "5             False              True                False   \n",
              "6             False             False                False   \n",
              "7             False             False                False   \n",
              "8              True             False                 True   \n",
              "9             False              True                 True   \n",
              "\n",
              "   Transmission_Semi-Automatic  Doors_3  Doors_4  Doors_5  Owner_Count_2  \\\n",
              "0                        False     True    False    False          False   \n",
              "1                        False    False    False    False          False   \n",
              "2                        False    False     True    False           True   \n",
              "3                        False    False    False    False          False   \n",
              "4                         True     True    False    False          False   \n",
              "5                        False    False     True    False          False   \n",
              "6                        False     True    False    False          False   \n",
              "7                         True    False    False    False           True   \n",
              "8                        False     True    False    False          False   \n",
              "9                        False    False    False    False          False   \n",
              "\n",
              "   Owner_Count_3  Owner_Count_4  Owner_Count_5  Engine_Size_Group_Medium  \\\n",
              "0          False          False           True                     False   \n",
              "1           True          False          False                     False   \n",
              "2          False          False          False                     False   \n",
              "3          False          False          False                     False   \n",
              "4           True          False          False                      True   \n",
              "5          False           True          False                      True   \n",
              "6          False          False          False                      True   \n",
              "7          False          False          False                     False   \n",
              "8          False           True          False                      True   \n",
              "9          False          False           True                      True   \n",
              "\n",
              "   Engine_Size_Group_Large  Mileage_Group_Medium  Mileage_Group_High  \\\n",
              "0                     True                 False                True   \n",
              "1                    False                 False               False   \n",
              "2                     True                 False                True   \n",
              "3                    False                  True               False   \n",
              "4                    False                 False                True   \n",
              "5                    False                  True               False   \n",
              "6                    False                  True               False   \n",
              "7                     True                  True               False   \n",
              "8                    False                 False               False   \n",
              "9                    False                  True               False   \n",
              "\n",
              "   Year_of_Registration_Group_2010s  Year_of_Registration_Group_2020s  \n",
              "0                             False                              True  \n",
              "1                              True                             False  \n",
              "2                             False                              True  \n",
              "3                             False                              True  \n",
              "4                             False                             False  \n",
              "5                             False                             False  \n",
              "6                              True                             False  \n",
              "7                             False                             False  \n",
              "8                              True                             False  \n",
              "9                             False                             False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cfd48998-9f92-422c-b5b3-7fe4e5e1975f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Engine_Size</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Price</th>\n",
              "      <th>Brand_BMW</th>\n",
              "      <th>Brand_Chevrolet</th>\n",
              "      <th>Brand_Ford</th>\n",
              "      <th>Brand_Honda</th>\n",
              "      <th>Brand_Hyundai</th>\n",
              "      <th>Brand_Kia</th>\n",
              "      <th>Brand_Mercedes</th>\n",
              "      <th>Brand_Toyota</th>\n",
              "      <th>Brand_Volkswagen</th>\n",
              "      <th>Model_5 Series</th>\n",
              "      <th>Model_A3</th>\n",
              "      <th>Model_A4</th>\n",
              "      <th>Model_Accord</th>\n",
              "      <th>Model_C-Class</th>\n",
              "      <th>Model_CR-V</th>\n",
              "      <th>Model_Camry</th>\n",
              "      <th>Model_Civic</th>\n",
              "      <th>Model_Corolla</th>\n",
              "      <th>Model_E-Class</th>\n",
              "      <th>Model_Elantra</th>\n",
              "      <th>Model_Equinox</th>\n",
              "      <th>Model_Explorer</th>\n",
              "      <th>Model_Fiesta</th>\n",
              "      <th>Model_Focus</th>\n",
              "      <th>Model_GLA</th>\n",
              "      <th>Model_Golf</th>\n",
              "      <th>Model_Impala</th>\n",
              "      <th>Model_Malibu</th>\n",
              "      <th>Model_Optima</th>\n",
              "      <th>Model_Passat</th>\n",
              "      <th>Model_Q5</th>\n",
              "      <th>Model_RAV4</th>\n",
              "      <th>Model_Rio</th>\n",
              "      <th>Model_Sonata</th>\n",
              "      <th>Model_Sportage</th>\n",
              "      <th>Model_Tiguan</th>\n",
              "      <th>Model_Tucson</th>\n",
              "      <th>Model_X5</th>\n",
              "      <th>Fuel_Type_Electric</th>\n",
              "      <th>Fuel_Type_Hybrid</th>\n",
              "      <th>Fuel_Type_Petrol</th>\n",
              "      <th>Transmission_Manual</th>\n",
              "      <th>Transmission_Semi-Automatic</th>\n",
              "      <th>Doors_3</th>\n",
              "      <th>Doors_4</th>\n",
              "      <th>Doors_5</th>\n",
              "      <th>Owner_Count_2</th>\n",
              "      <th>Owner_Count_3</th>\n",
              "      <th>Owner_Count_4</th>\n",
              "      <th>Owner_Count_5</th>\n",
              "      <th>Engine_Size_Group_Medium</th>\n",
              "      <th>Engine_Size_Group_Large</th>\n",
              "      <th>Mileage_Group_Medium</th>\n",
              "      <th>Mileage_Group_High</th>\n",
              "      <th>Year_of_Registration_Group_2010s</th>\n",
              "      <th>Year_of_Registration_Group_2020s</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.727</td>\n",
              "      <td>0.600</td>\n",
              "      <td>0.942</td>\n",
              "      <td>8501</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.000</td>\n",
              "      <td>-0.500</td>\n",
              "      <td>-0.968</td>\n",
              "      <td>12092</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.727</td>\n",
              "      <td>0.600</td>\n",
              "      <td>0.550</td>\n",
              "      <td>11171</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.000</td>\n",
              "      <td>-0.500</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11780</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.818</td>\n",
              "      <td>-0.200</td>\n",
              "      <td>0.920</td>\n",
              "      <td>2867</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.455</td>\n",
              "      <td>-0.150</td>\n",
              "      <td>0.056</td>\n",
              "      <td>7242</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.182</td>\n",
              "      <td>0.200</td>\n",
              "      <td>-0.067</td>\n",
              "      <td>11208</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-1.000</td>\n",
              "      <td>0.850</td>\n",
              "      <td>0.053</td>\n",
              "      <td>7950</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.182</td>\n",
              "      <td>-0.200</td>\n",
              "      <td>-0.342</td>\n",
              "      <td>9926</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>-0.636</td>\n",
              "      <td>0.050</td>\n",
              "      <td>-0.281</td>\n",
              "      <td>6545</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cfd48998-9f92-422c-b5b3-7fe4e5e1975f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cfd48998-9f92-422c-b5b3-7fe4e5e1975f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cfd48998-9f92-422c-b5b3-7fe4e5e1975f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bfee89cc-69a1-4884-b52c-ecea44800e11\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bfee89cc-69a1-4884-b52c-ecea44800e11')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bfee89cc-69a1-4884-b52c-ecea44800e11 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ],
      "execution_count": 60
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **19. Creating Model**"
      ],
      "metadata": {
        "id": "1ef9824118d473a1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y = df[\"Price\"]"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:59:52.819947Z",
          "start_time": "2025-02-21T20:59:52.777584Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.954376Z",
          "iopub.execute_input": "2025-02-23T07:36:25.954889Z",
          "iopub.status.idle": "2025-02-23T07:36:25.959391Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.954849Z",
          "shell.execute_reply": "2025-02-23T07:36:25.958225Z"
        },
        "id": "2a01d7bbb85d31eb"
      },
      "outputs": [],
      "execution_count": 61
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop([\"Price\"], axis=1)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:59:54.635581Z",
          "start_time": "2025-02-21T20:59:54.513854Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.960389Z",
          "iopub.execute_input": "2025-02-23T07:36:25.960764Z",
          "iopub.status.idle": "2025-02-23T07:36:25.975794Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.960736Z",
          "shell.execute_reply": "2025-02-23T07:36:25.974771Z"
        },
        "id": "116103bd207fb629"
      },
      "outputs": [],
      "execution_count": 62
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=17)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T20:59:55.659004Z",
          "start_time": "2025-02-21T20:59:55.406776Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.97682Z",
          "iopub.execute_input": "2025-02-23T07:36:25.97716Z",
          "iopub.status.idle": "2025-02-23T07:36:25.99166Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.977123Z",
          "shell.execute_reply": "2025-02-23T07:36:25.99067Z"
        },
        "id": "385c6ee7a2a10e9a"
      },
      "outputs": [],
      "execution_count": 63
    },
    {
      "cell_type": "code",
      "source": [
        "models = [('LR', LinearRegression()),\n",
        "          ('LogR', LogisticRegression()),\n",
        "          (\"Ridge\", Ridge()),\n",
        "          (\"Lasso\", Lasso()),\n",
        "          (\"ElasticNet\", ElasticNet()),\n",
        "          ('KNN', KNeighborsRegressor()),\n",
        "          ('CART', DecisionTreeRegressor()),\n",
        "          ('RF', RandomForestRegressor()),\n",
        "          #('SVR', SVR()),\n",
        "          ('GBM', GradientBoostingRegressor()),\n",
        "          (\"XGBoost\", XGBRegressor(objective='reg:squarederror')),\n",
        "          (\"LightGBM\", LGBMRegressor()),\n",
        "          (\"CatBoost\", CatBoostRegressor(verbose=False))]\n",
        "\n",
        "rmse_scores = []\n",
        "r2_scores = []\n",
        "mae_scores = []\n",
        "mse_scores = []\n",
        "execution_times = []\n",
        "\n",
        "for name, regressor in models:\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Fit the model\n",
        "    regressor.fit(X_train, y_train)\n",
        "\n",
        "    # Make predictions\n",
        "    y_pred = regressor.predict(X_test)\n",
        "\n",
        "    # Calculate RMSE\n",
        "    rmse = np.mean(np.sqrt(-cross_val_score(regressor, X, y, cv=5, scoring=\"neg_mean_squared_error\")))\n",
        "    rmse_scores.append(rmse)\n",
        "\n",
        "    # Calculate R^2 score\n",
        "    r2 = metrics.r2_score(y_test, y_pred)\n",
        "    r2_scores.append(r2)\n",
        "\n",
        "    # Calculate MAE\n",
        "    mae = metrics.mean_absolute_error(y_test, y_pred)\n",
        "    mae_scores.append(mae)\n",
        "\n",
        "    # Calculate MSE\n",
        "    mse = metrics.mean_squared_error(y_test, y_pred)\n",
        "    mse_scores.append(mse)\n",
        "\n",
        "    # Calculate the execution time of the model\n",
        "    execution_time = time.time() - start_time\n",
        "    execution_times.append(execution_time)\n",
        "\n",
        "    print(f\"RMSE: {round(rmse, 4)} ({name})\")\n",
        "    print(f\"R^2 Score: {round(r2, 4)} ({name})\")\n",
        "    print(f\"MAE: {round(mae, 4)} ({name})\")\n",
        "    print(f\"MSE: {round(mse, 4)} ({name})\")\n",
        "    print(f\"Execution Time: {round(execution_time, 2)} seconds\\n\")"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T21:05:26.715028Z",
          "start_time": "2025-02-21T21:01:07.613754Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:36:25.992671Z",
          "iopub.execute_input": "2025-02-23T07:36:25.992982Z",
          "iopub.status.idle": "2025-02-23T07:43:25.697663Z",
          "shell.execute_reply.started": "2025-02-23T07:36:25.992944Z",
          "shell.execute_reply": "2025-02-23T07:43:25.696766Z"
        },
        "id": "2fb914247c497de6",
        "outputId": "0f7fcb13-132f-434f-eb49-ad1e0be8e707",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 84.0394 (LR)\n",
            "R^2 Score: 0.9986 (LR)\n",
            "MAE: 23.7184 (LR)\n",
            "MSE: 13446.0301 (LR)\n",
            "Execution Time: 0.27 seconds\n",
            "\n",
            "RMSE: 1971.9832 (LogR)\n",
            "R^2 Score: 0.5846 (LogR)\n",
            "MAE: 1581.5705 (LogR)\n",
            "MSE: 3976195.1265 (LogR)\n",
            "Execution Time: 384.98 seconds\n",
            "\n",
            "RMSE: 84.1326 (Ridge)\n",
            "R^2 Score: 0.9986 (Ridge)\n",
            "MAE: 25.1981 (Ridge)\n",
            "MSE: 13399.4494 (Ridge)\n",
            "Execution Time: 0.1 seconds\n",
            "\n",
            "RMSE: 84.1952 (Lasso)\n",
            "R^2 Score: 0.9986 (Lasso)\n",
            "MAE: 26.4039 (Lasso)\n",
            "MSE: 13379.8577 (Lasso)\n",
            "Execution Time: 0.2 seconds\n",
            "\n",
            "RMSE: 1704.9177 (ElasticNet)\n",
            "R^2 Score: 0.7012 (ElasticNet)\n",
            "MAE: 1365.0267 (ElasticNet)\n",
            "MSE: 2860704.854 (ElasticNet)\n",
            "Execution Time: 0.16 seconds\n",
            "\n",
            "RMSE: 1246.6698 (KNN)\n",
            "R^2 Score: 0.8392 (KNN)\n",
            "MAE: 993.196 (KNN)\n",
            "MSE: 1539064.0956 (KNN)\n",
            "Execution Time: 1.08 seconds\n",
            "\n",
            "RMSE: 868.7627 (CART)\n",
            "R^2 Score: 0.9226 (CART)\n",
            "MAE: 643.528 (CART)\n",
            "MSE: 741089.449 (CART)\n",
            "Execution Time: 0.63 seconds\n",
            "\n",
            "RMSE: 544.1491 (RF)\n",
            "R^2 Score: 0.97 (RF)\n",
            "MAE: 438.5358 (RF)\n",
            "MSE: 286744.8197 (RF)\n",
            "Execution Time: 46.85 seconds\n",
            "\n",
            "RMSE: 230.9394 (GBM)\n",
            "R^2 Score: 0.9945 (GBM)\n",
            "MAE: 180.348 (GBM)\n",
            "MSE: 52473.7429 (GBM)\n",
            "Execution Time: 10.86 seconds\n",
            "\n",
            "RMSE: 241.5106 (XGBoost)\n",
            "R^2 Score: 0.9943 (XGBoost)\n",
            "MAE: 185.2855 (XGBoost)\n",
            "MSE: 54997.7031 (XGBoost)\n",
            "Execution Time: 3.33 seconds\n",
            "\n",
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000321 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 432\n",
            "[LightGBM] [Info] Number of data points in the train set: 8000, number of used features: 59\n",
            "[LightGBM] [Info] Start training from score 8849.469375\n",
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000321 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 432\n",
            "[LightGBM] [Info] Number of data points in the train set: 8000, number of used features: 59\n",
            "[LightGBM] [Info] Start training from score 8836.845750\n",
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000317 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 432\n",
            "[LightGBM] [Info] Number of data points in the train set: 8000, number of used features: 59\n",
            "[LightGBM] [Info] Start training from score 8869.038750\n",
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000315 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 432\n",
            "[LightGBM] [Info] Number of data points in the train set: 8000, number of used features: 59\n",
            "[LightGBM] [Info] Start training from score 8846.634375\n",
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000308 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 432\n",
            "[LightGBM] [Info] Number of data points in the train set: 8000, number of used features: 59\n",
            "[LightGBM] [Info] Start training from score 8837.781375\n",
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000334 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 432\n",
            "[LightGBM] [Info] Number of data points in the train set: 8000, number of used features: 59\n",
            "[LightGBM] [Info] Start training from score 8874.521750\n",
            "RMSE: 182.0677 (LightGBM)\n",
            "R^2 Score: 0.9966 (LightGBM)\n",
            "MAE: 142.9234 (LightGBM)\n",
            "MSE: 32597.8377 (LightGBM)\n",
            "Execution Time: 1.01 seconds\n",
            "\n",
            "RMSE: 53.1373 (CatBoost)\n",
            "R^2 Score: 0.9997 (CatBoost)\n",
            "MAE: 31.2164 (CatBoost)\n",
            "MSE: 3085.872 (CatBoost)\n",
            "Execution Time: 18.78 seconds\n",
            "\n"
          ]
        }
      ],
      "execution_count": 64
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **20. Hyperparameter optimization**"
      ],
      "metadata": {
        "id": "a2c0013b145c8e1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize the models\n",
        "models = [('LR', LinearRegression()),\n",
        "          (\"Ridge\", Ridge()),\n",
        "          (\"Lasso\", Lasso()),\n",
        "          (\"ElasticNet\", ElasticNet()),\n",
        "          ('KNN', KNeighborsRegressor()),\n",
        "          ('CART', DecisionTreeRegressor()),\n",
        "          ('RF', RandomForestRegressor()),\n",
        "          #('SVR', SVR()),\n",
        "          ('GBM', GradientBoostingRegressor()),\n",
        "          (\"XGBoost\", XGBRegressor(objective='reg:squarederror')),\n",
        "          (\"LightGBM\", LGBMRegressor()),\n",
        "          (\"CatBoost\", CatBoostRegressor(verbose=False))]\n",
        "\n",
        "# Initialize lists to store metrics\n",
        "rmse_scores = []\n",
        "r2_scores = []\n",
        "mae_scores = []\n",
        "mse_scores = []\n",
        "execution_times = []\n",
        "\n",
        "# Define the hyperparameters for each model\n",
        "param_grids = {\n",
        "    'LR': {},\n",
        "    'Ridge': {'alpha': [0.1, 1.0]},\n",
        "    'Lasso': {'alpha': [0.1, 1.0]},\n",
        "    'ElasticNet': {'alpha': [0.1, 1.0], 'l1_ratio': [0.1, 0.9]},\n",
        "    'KNN': {'n_neighbors': [3, 5]},\n",
        "    'CART': {'max_depth': [None, 10], 'min_samples_leaf': [1, 2]},\n",
        "    'RF': {'n_estimators': [10, 50], 'max_depth': [None, 10]},\n",
        "    'GBM': {'n_estimators': [10, 50], 'learning_rate': [0.01, 0.1]},\n",
        "    'XGBoost': {'n_estimators': [10, 50], 'learning_rate': [0.01, 0.1]},\n",
        "    'LightGBM': {'n_estimators': [10, 50], 'learning_rate': [0.01, 0.1]},\n",
        "    'CatBoost': {'iterations': [10, 50], 'learning_rate': [0.01, 0.1], 'depth': [4, 6]}\n",
        "}\n",
        "\n",
        "# Train and evaluate the models with hyperparameter tuning\n",
        "for name, regressor in models:\n",
        "    print(f\"Hyperparameter Tuning for {name}:\")\n",
        "    start_time = time.time()\n",
        "\n",
        "    if param_grids[name]:\n",
        "        grid_search = GridSearchCV(regressor, param_grid=param_grids[name], cv=5, n_jobs=-1)\n",
        "        grid_search.fit(X_train, y_train)\n",
        "        best_model = grid_search.best_estimator_\n",
        "\n",
        "        print(f\"Best parameters: {grid_search.best_params_}\")\n",
        "    else:\n",
        "        best_model = regressor.fit(X_train, y_train)\n",
        "\n",
        "    # Make predictions\n",
        "    y_pred = best_model.predict(X_test)\n",
        "\n",
        "    # Calculate RMSE\n",
        "    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "    rmse_scores.append(rmse)\n",
        "\n",
        "    # Calculate R^2 score\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    r2_scores.append(r2)\n",
        "\n",
        "    # Calculate MAE\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    mae_scores.append(mae)\n",
        "\n",
        "    # Calculate MSE\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    mse_scores.append(mse)\n",
        "\n",
        "    # Calculate the execution time of the model\n",
        "    execution_time = time.time() - start_time\n",
        "    execution_times.append(execution_time)\n",
        "\n",
        "    print(f\"RMSE: {round(rmse, 4)} ({name})\")\n",
        "    print(f\"R^2 Score: {round(r2, 4)} ({name})\")\n",
        "    print(f\"MAE: {round(mae, 4)} ({name})\")\n",
        "    print(f\"MSE: {round(mse, 4)} ({name})\")\n",
        "    print(f\"Execution Time: {round(execution_time, 2)} seconds\\n\")\n",
        "\n",
        "# Plot RMSE scores\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.bar([name for name, _ in models], rmse_scores)\n",
        "plt.xlabel(\"Model\")\n",
        "plt.ylabel(\"RMSE\")\n",
        "plt.title(\"Model Performance (RMSE)\")\n",
        "plt.show()\n",
        "\n",
        "# Plot R^2 scores\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.bar([name for name, _ in models], r2_scores)\n",
        "plt.xlabel(\"Model\")\n",
        "plt.ylabel(\"R^2 Score\")\n",
        "plt.title(\"Model Performance (R^2 Score)\")\n",
        "plt.show()\n",
        "\n",
        "# Plot MAE scores\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.bar([name for name, _ in models], mae_scores)\n",
        "plt.xlabel(\"Model\")\n",
        "plt.ylabel(\"MAE\")\n",
        "plt.title(\"Model Performance (MAE)\")\n",
        "plt.show()\n",
        "\n",
        "# Plot MSE scores\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.bar([name for name, _ in models], mse_scores)\n",
        "plt.xlabel(\"Model\")\n",
        "plt.ylabel(\"MSE\")\n",
        "plt.title(\"Model Performance (MSE)\")\n",
        "plt.show()\n",
        "\n",
        "# Plot execution times\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.bar([name for name, _ in models], execution_times)\n",
        "plt.xlabel(\"Execution Time (seconds)\")\n",
        "plt.ylabel(\"Model\")\n",
        "plt.title(\"Execution Times for Different Models\")\n",
        "plt.show()"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T21:08:11.120322Z",
          "start_time": "2025-02-21T21:07:41.166043Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:43:25.698511Z",
          "iopub.execute_input": "2025-02-23T07:43:25.698754Z",
          "iopub.status.idle": "2025-02-23T07:43:58.20191Z",
          "shell.execute_reply.started": "2025-02-23T07:43:25.698732Z",
          "shell.execute_reply": "2025-02-23T07:43:58.200919Z"
        },
        "id": "b59e1c284e30ad3f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "839cf5c0-fae0-4e6c-ccaa-2883b1f2a29b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hyperparameter Tuning for LR:\n",
            "RMSE: 115.957 (LR)\n",
            "R^2 Score: 0.9986 (LR)\n",
            "MAE: 23.7184 (LR)\n",
            "MSE: 13446.0301 (LR)\n",
            "Execution Time: 0.03 seconds\n",
            "\n",
            "Hyperparameter Tuning for Ridge:\n",
            "Best parameters: {'alpha': 0.1}\n",
            "RMSE: 115.9324 (Ridge)\n",
            "R^2 Score: 0.9986 (Ridge)\n",
            "MAE: 23.8521 (Ridge)\n",
            "MSE: 13440.3318 (Ridge)\n",
            "Execution Time: 4.18 seconds\n",
            "\n",
            "Hyperparameter Tuning for Lasso:\n",
            "Best parameters: {'alpha': 0.1}\n",
            "RMSE: 115.8793 (Lasso)\n",
            "R^2 Score: 0.9986 (Lasso)\n",
            "MAE: 23.5118 (Lasso)\n",
            "MSE: 13428.0071 (Lasso)\n",
            "Execution Time: 0.3 seconds\n",
            "\n",
            "Hyperparameter Tuning for ElasticNet:\n",
            "Best parameters: {'alpha': 0.1, 'l1_ratio': 0.9}\n",
            "RMSE: 194.0222 (ElasticNet)\n",
            "R^2 Score: 0.9961 (ElasticNet)\n",
            "MAE: 146.9338 (ElasticNet)\n",
            "MSE: 37644.6035 (ElasticNet)\n",
            "Execution Time: 0.74 seconds\n",
            "\n",
            "Hyperparameter Tuning for KNN:\n",
            "Best parameters: {'n_neighbors': 5}\n",
            "RMSE: 1240.5902 (KNN)\n",
            "R^2 Score: 0.8392 (KNN)\n",
            "MAE: 993.196 (KNN)\n",
            "MSE: 1539064.0956 (KNN)\n",
            "Execution Time: 1.09 seconds\n",
            "\n",
            "Hyperparameter Tuning for CART:\n",
            "Best parameters: {'max_depth': None, 'min_samples_leaf': 2}\n",
            "RMSE: 790.982 (CART)\n",
            "R^2 Score: 0.9346 (CART)\n",
            "MAE: 592.4896 (CART)\n",
            "MSE: 625652.504 (CART)\n",
            "Execution Time: 1.33 seconds\n",
            "\n",
            "Hyperparameter Tuning for RF:\n",
            "Best parameters: {'max_depth': None, 'n_estimators': 50}\n",
            "RMSE: 549.357 (RF)\n",
            "R^2 Score: 0.9685 (RF)\n",
            "MAE: 445.3976 (RF)\n",
            "MSE: 301793.1358 (RF)\n",
            "Execution Time: 27.73 seconds\n",
            "\n",
            "Hyperparameter Tuning for GBM:\n",
            "Best parameters: {'learning_rate': 0.1, 'n_estimators': 50}\n",
            "RMSE: 539.2738 (GBM)\n",
            "R^2 Score: 0.9696 (GBM)\n",
            "MAE: 432.1061 (GBM)\n",
            "MSE: 290816.2322 (GBM)\n",
            "Execution Time: 7.51 seconds\n",
            "\n",
            "Hyperparameter Tuning for XGBoost:\n",
            "Best parameters: {'learning_rate': 0.1, 'n_estimators': 50}\n",
            "RMSE: 267.8253 (XGBoost)\n",
            "R^2 Score: 0.9925 (XGBoost)\n",
            "MAE: 211.8868 (XGBoost)\n",
            "MSE: 71730.4141 (XGBoost)\n",
            "Execution Time: 3.52 seconds\n",
            "\n",
            "Hyperparameter Tuning for LightGBM:\n",
            "[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002046 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 432\n",
            "[LightGBM] [Info] Number of data points in the train set: 8000, number of used features: 59\n",
            "[LightGBM] [Info] Start training from score 8849.469375\n",
            "Best parameters: {'learning_rate': 0.1, 'n_estimators': 50}\n",
            "RMSE: 257.8654 (LightGBM)\n",
            "R^2 Score: 0.9931 (LightGBM)\n",
            "MAE: 201.3074 (LightGBM)\n",
            "MSE: 66494.5819 (LightGBM)\n",
            "Execution Time: 4.62 seconds\n",
            "\n",
            "Hyperparameter Tuning for CatBoost:\n",
            "Best parameters: {'depth': 6, 'iterations': 50, 'learning_rate': 0.1}\n",
            "RMSE: 278.7531 (CatBoost)\n",
            "R^2 Score: 0.9919 (CatBoost)\n",
            "MAE: 222.7369 (CatBoost)\n",
            "MSE: 77703.2901 (CatBoost)\n",
            "Execution Time: 6.99 seconds\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 65
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **21. Final Model Predictions and Comparison with True Prices**"
      ],
      "metadata": {
        "id": "f4d58d471660de50"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_model"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T21:13:46.7734Z",
          "start_time": "2025-02-21T21:13:46.647633Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:43:58.202919Z",
          "iopub.execute_input": "2025-02-23T07:43:58.203208Z",
          "iopub.status.idle": "2025-02-23T07:43:58.208658Z",
          "shell.execute_reply.started": "2025-02-23T07:43:58.203184Z",
          "shell.execute_reply": "2025-02-23T07:43:58.207831Z"
        },
        "id": "5dda24bc9c28aa8b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29f3751c-b968-4f95-a8a0-b76ad6bbea87"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<catboost.core.CatBoostRegressor at 0x7b5ea7794fd0>"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ],
      "execution_count": 66
    },
    {
      "cell_type": "code",
      "source": [
        "# Final Prediction Model\n",
        "final_model = best_model\n",
        "\n",
        "# Make predictions on the test set using the final model\n",
        "y_final_pred = final_model.predict(X_test)\n",
        "final_y_pred = (y_final_pred)\n",
        "final_y_test =(y_test)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T21:14:06.503878Z",
          "start_time": "2025-02-21T21:14:06.345586Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:43:58.209634Z",
          "iopub.execute_input": "2025-02-23T07:43:58.209902Z",
          "iopub.status.idle": "2025-02-23T07:43:58.226203Z",
          "shell.execute_reply.started": "2025-02-23T07:43:58.209878Z",
          "shell.execute_reply": "2025-02-23T07:43:58.225276Z"
        },
        "id": "4e432e9e4d179ec2"
      },
      "outputs": [],
      "execution_count": 67
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a DataFrame with the predicted prices and true prices\n",
        "results = pd.DataFrame({'Predicted Price': final_y_pred, 'True Price': final_y_test})\n",
        "\n",
        "# Calculate the difference between the true prices and predicted prices and add a new column\n",
        "results['Difference'] = results['True Price'] - results['Predicted Price']\n",
        "\n",
        "# Display the results\n",
        "print(results)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T21:14:08.26832Z",
          "start_time": "2025-02-21T21:14:08.154894Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:43:58.227187Z",
          "iopub.execute_input": "2025-02-23T07:43:58.2275Z",
          "iopub.status.idle": "2025-02-23T07:43:58.238614Z",
          "shell.execute_reply.started": "2025-02-23T07:43:58.227474Z",
          "shell.execute_reply": "2025-02-23T07:43:58.237791Z"
        },
        "id": "e82739d52b55240e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "440596eb-d976-44db-e8eb-6dff4c5e0ab1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Predicted Price  True Price  Difference\n",
            "2688        10502.852       10308    -194.852\n",
            "233          5432.489        5447      14.511\n",
            "9099         8643.772        8732      88.228\n",
            "8652         7719.112        7871     151.888\n",
            "2842         9158.969        9144     -14.969\n",
            "...               ...         ...         ...\n",
            "4395        11495.335       11813     317.665\n",
            "8669         4398.477        4465      66.523\n",
            "7634        12458.263       12629     170.737\n",
            "556          2853.127        2445    -408.127\n",
            "8247        11308.017       11192    -116.017\n",
            "\n",
            "[2000 rows x 3 columns]\n"
          ]
        }
      ],
      "execution_count": 68
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **22. Feature Importance**"
      ],
      "metadata": {
        "id": "ce2c13f1780c554d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_importance(model, features, num=50, save=False):\n",
        "    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features.columns})\n",
        "    plt.figure(figsize=(10, 10))\n",
        "    sns.set(font_scale=1)\n",
        "    sns.barplot(x=\"Value\", y=\"Feature\", palette=\"Set2\", data=feature_imp.sort_values(by=\"Value\",\n",
        "                                                                     ascending=False)[0:num])\n",
        "    plt.title('Features')\n",
        "    plt.tight_layout()\n",
        "    plt.show(block=True)\n",
        "    if save:\n",
        "        plt.savefig('importances.png')\n",
        "\n",
        "plot_importance(final_model, X)"
      ],
      "metadata": {
        "ExecuteTime": {
          "end_time": "2025-02-21T18:49:21.586864Z",
          "start_time": "2025-02-21T18:49:20.275431Z"
        },
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-02-23T07:43:58.239674Z",
          "iopub.execute_input": "2025-02-23T07:43:58.240034Z",
          "iopub.status.idle": "2025-02-23T07:43:59.078383Z",
          "shell.execute_reply.started": "2025-02-23T07:43:58.239999Z",
          "shell.execute_reply": "2025-02-23T07:43:59.077382Z"
        },
        "id": "59504ba010045f8c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "01b57e7e-dd72-4afd-b51a-344e057bc57c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 69
    }
  ]
}